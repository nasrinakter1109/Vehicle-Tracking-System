{
  "version": 3,
  "file": "toverux-ngx-sweetalert2.umd.min.js",
  "sources": [
    "ng://@toverux/ngx-sweetalert2/out/swal-partial-targets.ts",
    "ng://@toverux/ngx-sweetalert2/out/di.ts",
    "ng://@toverux/ngx-sweetalert2/out/swal.component.ts",
    "ng://@toverux/ngx-sweetalert2/out/swal.directive.ts",
    "ng://@toverux/ngx-sweetalert2/out/swal-partial.component.ts",
    "ng://@toverux/ngx-sweetalert2/out/swal-partial.directive.ts",
    "ng://@toverux/ngx-sweetalert2/out/sweetalert2.module.ts"
  ],
  "sourcesContent": [
    "import swal from 'sweetalert2';\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\n    public readonly title = () => swal.getTitle();\n\n    public readonly content = () => swal.getContent();\n\n    /**\n     * @deprecated Will be removed in the next major version, please use {@link SwalPartialTargets#actions} instead.\n     */\n    public readonly buttonsWrapper = () => swal.getButtonsWrapper();\n\n    public readonly actions = () => swal.getActions();\n\n    public readonly confirmButton = () => swal.getConfirmButton();\n\n    public readonly cancelButton = () => swal.getCancelButton();\n\n    public readonly footer = () => swal.getFooter();\n}\n",
    "import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n",
    "import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnChanges, OnDestroy {\n    // If Swal gets more than a hundred props, I'll write a code generator, I promise.\n    // And I always resolve() my promises.\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public type: SweetAlertOptions['type'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    @Input() public cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public imageClass: SweetAlertOptions['imageClass'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public inputClass: SweetAlertOptions['inputClass'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output() public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    @Output() public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    @Output() public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input() public set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n\n    public get options(): SweetAlertOptions {\n        const options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = (this as { [prop: string]: any })[prop];\n        });\n\n        return options;\n    }\n\n    public nativeSwal = swal;\n\n    private isCurrentlyShown = false;\n\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    public constructor(@Inject(SwalDefaults) private readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n\n    public ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const promise = swal(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        // tslint:disable-next-line:no-string-literal\n        const useRejections = (options as { useRejections?: boolean }).useRejections;\n\n        promise.then(\n            result => {\n                if (useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                if (useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\n}\n",
    "import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (Array.isArray(options)) {\n            this.swalOptions = swal.argsToParams(options);\n        } else {\n            this.swalOptions = options;\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\n}\n",
    "import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n@Component({\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPartialComponent {\n    @Input() public template: TemplateRef<any>;\n}\n",
    "import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPartial]'\n})\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input() public swalPartial: () => HTMLElement;\n\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef: ComponentRef<SwalPartialComponent>;\n\n    private beforeOpenSubscription: Subscription;\n    private closeSubscription: Subscription;\n\n    constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly swalTargets: SwalPartialTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    public ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\n}\n",
    "import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\n\n@NgModule({\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\n}\n"
  ],
  "names": [
    "SwalPartialTargets",
    "this",
    "title",
    "swal",
    "getTitle",
    "content",
    "getContent",
    "buttonsWrapper",
    "getButtonsWrapper",
    "actions",
    "getActions",
    "confirmButton",
    "getConfirmButton",
    "cancelButton",
    "getCancelButton",
    "footer",
    "getFooter",
    "SwalDefaults",
    "InjectionToken",
    "swalDefaultsProvider",
    "options",
    "provide",
    "useValue",
    "SwalComponent",
    "defaultSwalOptions",
    "beforeOpen",
    "EventEmitter",
    "open",
    "close",
    "confirm",
    "cancel",
    "nativeSwal",
    "isCurrentlyShown",
    "touchedProps",
    "Set",
    "markTouched",
    "add",
    "bind",
    "show",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "_this",
    "forEach",
    "prop",
    "set",
    "assign",
    "keys",
    "ngOnChanges",
    "changes",
    "filter",
    "ngOnDestroy",
    "onBeforeOpen",
    "modalElement",
    "emit",
    "onOpen",
    "onClose",
    "promise",
    "useRejections",
    "then",
    "result",
    "value",
    "dismiss",
    "err",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "undefined",
    "decorators",
    "Inject",
    "Input",
    "titleText",
    "text",
    "html",
    "backdrop",
    "toast",
    "target",
    "input",
    "width",
    "padding",
    "background",
    "position",
    "grow",
    "customClass",
    "timer",
    "animation",
    "allowOutsideClick",
    "allowEscapeKey",
    "allowEnterKey",
    "showConfirmButton",
    "showCancelButton",
    "confirmButtonText",
    "cancelButtonText",
    "confirmButtonColor",
    "cancelButtonColor",
    "confirmButtonClass",
    "cancelButtonClass",
    "confirmButtonAriaLabel",
    "cancelButtonAriaLabel",
    "buttonsStyling",
    "reverseButtons",
    "focusConfirm",
    "focusCancel",
    "showCloseButton",
    "closeButtonAriaLabel",
    "showLoaderOnConfirm",
    "preConfirm",
    "imageUrl",
    "imageWidth",
    "imageHeight",
    "imageAlt",
    "imageClass",
    "inputPlaceholder",
    "inputValue",
    "inputOptions",
    "inputAutoTrim",
    "inputAttributes",
    "inputValidator",
    "inputClass",
    "progressSteps",
    "currentProgressStep",
    "progressStepsDistance",
    "Output",
    "SwalDirective",
    "viewContainerRef",
    "resolver",
    "swalInstance",
    "Array",
    "isArray",
    "swalOptions",
    "argsToParams",
    "ngOnInit",
    "factory",
    "resolveComponentFactory",
    "swalRef",
    "createComponent",
    "instance",
    "destroy",
    "onHostClicked",
    "event",
    "preventDefault",
    "stopImmediatePropagation",
    "stopPropagation",
    "confirmSub",
    "asObservable",
    "subscribe",
    "v",
    "cancelSub",
    "unsubscribe",
    "Directive",
    "ViewContainerRef",
    "ComponentFactoryResolver",
    "HostListener",
    "SwalPartialComponent",
    "SwalPartialDirective",
    "injector",
    "app",
    "templateRef",
    "swalTargets",
    "swalComponent",
    "beforeOpenSubscription",
    "targetEl",
    "swalPartial",
    "partialRef",
    "create",
    "attachView",
    "hostView",
    "closeSubscription",
    "detachView",
    "Injector",
    "ApplicationRef",
    "TemplateRef",
    "Host",
    "SweetAlert2Module",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "exports",
    "entryComponents"
  ],
  "mappings": "gdAOA,IAAAA,aACAC,KAAAC,MAA4B,WAAM,OAAAC,EAAKC,YAEvCH,KAAAI,QAA8B,WAAM,OAAAF,EAAKG,cAKzCL,KAAAM,eAAqC,WAAM,OAAAJ,EAAKK,qBAEhDP,KAAAQ,QAA8B,WAAM,OAAAN,EAAKO,cAEzCT,KAAAU,cAAoC,WAAM,OAAAR,EAAKS,oBAE/CX,KAAAY,aAAmC,WAAM,OAAAV,EAAKW,mBAE9Cb,KAAAc,OAA6B,WAAM,OAAAZ,EAAKa,cCpB3BC,EAAe,IAAIC,EAAAA,eAAkC,gBAElE,SAAAC,EAAqCC,GACjC,YADJ,IAAAA,IAAqCA,EAArC,IACW,CACHC,QAASJ,EACTK,SAAUF,GCmBlB,IAAAG,EAAA,WAmIA,SAAAA,EAA8DC,GAAAvB,KAA9DuB,mBAA8DA,EArE9DvB,KAAAwB,WAA2C,IAAIC,EAAAA,aAK/CzB,KAAA0B,KAAqC,IAAID,EAAAA,aAKzCzB,KAAA2B,MAAsC,IAAIF,EAAAA,aAW1CzB,KAAA4B,QAAwC,IAAIH,EAAAA,aAa5CzB,KAAA6B,OAAuC,IAAIJ,EAAAA,aA2B3CzB,KAAA8B,WAAwB5B,EAExBF,KAAA+B,kBAA+B,EAE/B/B,KAAAgC,aAAoC,IAAIC,IAExCjC,KAAAkC,YAAmClC,KAAKgC,aAAaG,IAAIC,KAAKpC,KAAKgC,cAK3DhC,KAAKqC,KAAOrC,KAAKqC,KAAKD,KAAKpC,aA7BnCsC,OAAAC,eAAwBjB,EAAxBkB,UAAA,UAAA,CAKAC,IAAA,WAAA,IAAAC,EAAA1C,KACcmB,EAA6B,GASnC,OAJAnB,KAAKgC,aAAaW,QAAQ,SAAAC,GACtBzB,EAAQyB,GAAQ,EAAkCA,KAG/CzB,GAff0B,IAAA,SAAgC1B,GACxBmB,OAAOQ,OAAO9C,KAAMmB,GACpBmB,OAAOS,KAAK5B,GAASwB,QAAQ3C,KAAKkC,8CA8B/BZ,EAAXkB,UAAAQ,YAAW,SAAYC,GACfX,OAAOS,KAAKE,GACPC,OAAO,SAAAN,GAAQ,MAAS,YAATA,IACfD,QAAQ3C,KAAKkC,cAGfZ,EAAXkB,UAAAW,YAAW,WACCnD,KAAK+B,kBACL7B,EAAKyB,SAUNL,EAAXkB,UAAAH,KAAW,WAAA,IAAXK,EAAA1C,KAEcmB,EAAdmB,OAAAQ,OAAA,GAEe9C,KAAKuB,mBAGLvB,KAAKmB,QALpB,CAQYiC,aAAc,SAACC,GACXX,EAAKlB,WAAW8B,KAAK,CAAED,aAAvCA,KAGYE,OAAQ,SAACF,GACLX,EAAKX,kBAAmB,EACxBW,EAAKhB,KAAK4B,KAAK,CAAED,aAAjCA,KAGYG,QAAS,SAACH,GACNX,EAAKX,kBAAmB,EACxBW,EAAKf,MAAM2B,KAAK,CAAED,aAAlCA,OAKcI,EAAUvD,EAAKiB,GAIfuC,EAAgB,EAAyCA,cAoB/D,OAlBAD,EAAQE,KACJ,SAAAC,GACQF,EACAhB,EAAKd,QAAQ0B,KAAKM,GACX,UAAWA,EAClBlB,EAAKd,QAAQ0B,KAAKM,EAAOC,OAEzBnB,EAAKb,OAAOyB,KAAKM,EAAOE,UAGhC,SAAAC,GACQL,GACAhB,EAAKb,OAAOyB,KAAKS,KAMtBN,KA7Mf,iBALA,CAAAO,KAACC,EAAAA,UAADC,KAAA,CAAW,CACPC,SAAU,OACVC,SAAU,GACVC,gBAAiBC,EAAAA,wBAAwBC,8CAqI7C,CAAAP,KAAAQ,UAAAC,WAAA,CAAA,CAAAT,KAAwBU,EAAAA,OAAxBR,KAAA,CAA+BlD,0BAhI/Bf,MAAA,CAAA,CAAA+D,KAAKW,EAAAA,QACLC,UAAA,CAAA,CAAAZ,KAAKW,EAAAA,QACLE,KAAA,CAAA,CAAAb,KAAKW,EAAAA,QACLG,KAAA,CAAA,CAAAd,KAAKW,EAAAA,QACL7D,OAAA,CAAA,CAAAkD,KAAKW,EAAAA,QACLX,KAAA,CAAA,CAAAA,KAAKW,EAAAA,QACLI,SAAA,CAAA,CAAAf,KAAKW,EAAAA,QACLK,MAAA,CAAA,CAAAhB,KAAKW,EAAAA,QACLM,OAAA,CAAA,CAAAjB,KAAKW,EAAAA,QACLO,MAAA,CAAA,CAAAlB,KAAKW,EAAAA,QACLQ,MAAA,CAAA,CAAAnB,KAAKW,EAAAA,QACLS,QAAA,CAAA,CAAApB,KAAKW,EAAAA,QACLU,WAAA,CAAA,CAAArB,KAAKW,EAAAA,QACLW,SAAA,CAAA,CAAAtB,KAAKW,EAAAA,QACLY,KAAA,CAAA,CAAAvB,KAAKW,EAAAA,QACLa,YAAA,CAAA,CAAAxB,KAAKW,EAAAA,QACLc,MAAA,CAAA,CAAAzB,KAAKW,EAAAA,QACLe,UAAA,CAAA,CAAA1B,KAAKW,EAAAA,QACLgB,kBAAA,CAAA,CAAA3B,KAAKW,EAAAA,QACLiB,eAAA,CAAA,CAAA5B,KAAKW,EAAAA,QACLkB,cAAA,CAAA,CAAA7B,KAAKW,EAAAA,QACLmB,kBAAA,CAAA,CAAA9B,KAAKW,EAAAA,QACLoB,iBAAA,CAAA,CAAA/B,KAAKW,EAAAA,QACLqB,kBAAA,CAAA,CAAAhC,KAAKW,EAAAA,QACLsB,iBAAA,CAAA,CAAAjC,KAAKW,EAAAA,QACLuB,mBAAA,CAAA,CAAAlC,KAAKW,EAAAA,QACLwB,kBAAA,CAAA,CAAAnC,KAAKW,EAAAA,QACLyB,mBAAA,CAAA,CAAApC,KAAKW,EAAAA,QACL0B,kBAAA,CAAA,CAAArC,KAAKW,EAAAA,QACL2B,uBAAA,CAAA,CAAAtC,KAAKW,EAAAA,QACL4B,sBAAA,CAAA,CAAAvC,KAAKW,EAAAA,QACL6B,eAAA,CAAA,CAAAxC,KAAKW,EAAAA,QACL8B,eAAA,CAAA,CAAAzC,KAAKW,EAAAA,QACL+B,aAAA,CAAA,CAAA1C,KAAKW,EAAAA,QACLgC,YAAA,CAAA,CAAA3C,KAAKW,EAAAA,QACLiC,gBAAA,CAAA,CAAA5C,KAAKW,EAAAA,QACLkC,qBAAA,CAAA,CAAA7C,KAAKW,EAAAA,QACLmC,oBAAA,CAAA,CAAA9C,KAAKW,EAAAA,QACLoC,WAAA,CAAA,CAAA/C,KAAKW,EAAAA,QACLqC,SAAA,CAAA,CAAAhD,KAAKW,EAAAA,QACLsC,WAAA,CAAA,CAAAjD,KAAKW,EAAAA,QACLuC,YAAA,CAAA,CAAAlD,KAAKW,EAAAA,QACLwC,SAAA,CAAA,CAAAnD,KAAKW,EAAAA,QACLyC,WAAA,CAAA,CAAApD,KAAKW,EAAAA,QACL0C,iBAAA,CAAA,CAAArD,KAAKW,EAAAA,QACL2C,WAAA,CAAA,CAAAtD,KAAKW,EAAAA,QACL4C,aAAA,CAAA,CAAAvD,KAAKW,EAAAA,QACL6C,cAAA,CAAA,CAAAxD,KAAKW,EAAAA,QACL8C,gBAAA,CAAA,CAAAzD,KAAKW,EAAAA,QACL+C,eAAA,CAAA,CAAA1D,KAAKW,EAAAA,QACLgD,WAAA,CAAA,CAAA3D,KAAKW,EAAAA,QACLiD,cAAA,CAAA,CAAA5D,KAAKW,EAAAA,QACLkD,oBAAA,CAAA,CAAA7D,KAAKW,EAAAA,QACLmD,sBAAA,CAAA,CAAA9D,KAAKW,EAAAA,QAMLnD,WAAA,CAAA,CAAAwC,KAAK+D,EAAAA,SAKLrG,KAAA,CAAA,CAAAsC,KAAK+D,EAAAA,SAKLpG,MAAA,CAAA,CAAAqC,KAAK+D,EAAAA,SAWLnG,QAAA,CAAA,CAAAoC,KAAK+D,EAAAA,SAaLlG,OAAA,CAAA,CAAAmC,KAAK+D,EAAAA,SASL5G,QAAA,CAAA,CAAA6C,KAAKW,EAAAA,SC1GL,IAAAqD,EAAA,WA2DA,SAAAA,EAAyBC,EACAC,GADAlI,KAAzBiI,iBAAyBA,EACAjI,KAAzBkI,SAAyBA,EApCzBlI,KAAA4B,QAAwC,IAAIH,EAAAA,aAa5CzB,KAAA6B,OAAuC,IAAIJ,EAAAA,oBAhC3Ca,OAAAC,eAAwByF,EAAxBxF,UAAA,OAAA,CAAAK,IAAA,SAA6B1B,GACjBA,aAAmBG,EACnBtB,KAAKmI,aAAehH,EACbiH,MAAMC,QAAQlH,GACrBnB,KAAKsI,YAAcpI,EAAKqI,aAAapH,GAErCnB,KAAKsI,YAAcnH,mCAyDpB6G,EAAXxF,UAAAgG,SAAW,WACH,IAAKxI,KAAKmI,aAAc,CACpB,IAAMM,EAAUzI,KAAKkI,SAASQ,wBAAwBpH,GAEtDtB,KAAK2I,QAAU3I,KAAKiI,iBAAiBW,gBAAgBH,GACrDzI,KAAKmI,aAAenI,KAAK2I,QAAQE,WAQlCb,EAAXxF,UAAAW,YAAW,WACCnD,KAAK2I,SACL3I,KAAK2I,QAAQG,WAUdd,EAAXxF,UAAAuG,cAAW,SAAcC,GAAd,IAAXtG,EAAA1C,KACQgJ,EAAMC,iBACND,EAAME,2BACNF,EAAMG,kBAEFnJ,KAAKsI,cACLtI,KAAKmI,aAAahH,QAAUnB,KAAKsI,aAGrC,IAAMc,EAAapJ,KAAKmI,aAAavG,QAAQyH,eAAeC,UAAU,SAAAC,GAAK,OAAA7G,EAAKd,QAAQ0B,KAAKiG,KACvFC,EAAYxJ,KAAKmI,aAAatG,OAAOwH,eAAeC,UAAU,SAAAC,GAAK,OAAA7G,EAAKb,OAAOyB,KAAKiG,KAE1FvJ,KAAKmI,aAAa9F,OAAOsB,KAEzB,WACIyF,EAAWK,cACXD,EAAUC,mBA7GtB,iBAHA,CAAAzF,KAAC0F,EAAAA,UAADxF,KAAA,CAAW,CACPC,SAAU,gDAtBd,CAAAH,KAAI2F,EAAAA,kBADJ,CAAA3F,KAAI4F,EAAAA,8CA8BJ1J,KAAA,CAAA,CAAA8D,KAAKW,EAAAA,QAmBL/C,QAAA,CAAA,CAAAoC,KAAK+D,EAAAA,SAaLlG,OAAA,CAAA,CAAAmC,KAAK+D,EAAAA,SAuDLgB,cAAA,CAAA,CAAA/E,KAAK6F,EAAAA,aAAL3F,KAAA,CAAkB,QAAS,CAAC,cC3G5B,IAAA4F,EAAA,2BAJA,CAAA9F,KAACC,EAAAA,UAADC,KAAA,CAAW,CACPE,SAAU,6DACVC,gBAAiBC,EAAAA,wBAAwBC,mEAG7CH,SAAA,CAAA,CAAAJ,KAAKW,EAAAA,SC6BL,IAAAoF,EAAA,WAiBI,SAAJA,EACyB7B,EACA8B,EACAC,EACAC,EACAC,EACQC,GALRpK,KAAzBkI,SAAyBA,EACAlI,KAAzBgK,SAAyBA,EACAhK,KAAzBiK,IAAyBA,EACAjK,KAAzBkK,YAAyBA,EACAlK,KAAzBmK,YAAyBA,EACQnK,KAAjCoK,cAAiCA,SAOtBL,EAAXvH,UAAAgG,SAAW,WAAA,IAAX9F,EAAA1C,KACQA,KAAKqK,uBAAyBrK,KAAKoK,cAAc5I,WAAW6H,eAAeC,UAAU,WAEjF,IAAMgB,EAAW5H,EAAK6H,YAAc7H,EAAK6H,cAAgB7H,EAAKyH,YAAY/J,UACpEqI,EAAU/F,EAAKwF,SAASQ,wBAAwBoB,GAEtDpH,EAAK8H,WAAa/B,EAAQgC,OAAO/H,EAAKsH,SAAU,GAAIM,GAGpD5H,EAAK8H,WAAW3B,SAASzE,SAAW1B,EAAKwH,YAGzCxH,EAAKuH,IAAIS,WAAWhI,EAAK8H,WAAWG,YAGxC3K,KAAK4K,kBAAoB5K,KAAKoK,cAAczI,MAAM0H,eAAeC,UAAU,WAEvE5G,EAAKuH,IAAIY,WAAWnI,EAAK8H,WAAWG,UACpCjI,EAAK8H,WAAW1B,aAOjBiB,EAAXvH,UAAAW,YAAW,WACHnD,KAAKqK,uBAAuBZ,cAC5BzJ,KAAK4K,kBAAkBnB,iBAzD/B,iBAHA,CAAAzF,KAAC0F,EAAAA,UAADxF,KAAA,CAAW,CACPC,SAAU,uDAtCd,CAAAH,KAAoB4F,EAAAA,0BAApB,CAAA5F,KAA6E8G,EAAAA,UAA7E,CAAA9G,KAAI+G,EAAAA,gBACJ,CAAA/G,KAAIgH,EAAAA,aAGJ,CAAAhH,KAASjE,GAET,CAAAiE,KAAS1C,EAATmD,WAAA,CAAA,CAAAT,KAyDSiH,EAAAA,4BAhBTV,YAAA,CAAA,CAAAvG,KAAKW,EAAAA,SChDL,IAAAuG,EAAA,WAAA,SAAAA,YA8BkBA,EAAlBC,QAAW,SAAe5J,GAClB,MAAO,CACH6J,SAAUF,EACVG,UAAW,CAACnK,EAAqBK,QAjC7C,iBAUA,CAAAyC,KAACsH,EAAAA,SAADpH,KAAA,CAAU,CACNqH,aAAc,CACVjK,EAAeyI,EAAsBD,EACrC9B,GAEJqD,UAAW,CACPtL,GAEJyL,QAAS,CACLC,EAAAA,cAEJC,QAAS,CACLpK,EAAeyI,EACf/B,GAEJ2D,gBAAiB,CACbrK,EAAewI"
}
