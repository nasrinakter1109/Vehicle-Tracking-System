(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('ngx-tour-core'), require('@ng-bootstrap/ng-bootstrap'), require('withinviewport'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-tour-ng-bootstrap', ['exports', 'tslib', '@angular/core', 'ngx-tour-core', '@ng-bootstrap/ng-bootstrap', 'withinviewport', '@angular/common'], factory) :
    (factory((global['ngx-tour-ng-bootstrap'] = {}),global.tslib,global.ng.core,null,null,null,global.ng.common));
}(this, (function (exports,tslib_1,core,ngxTourCore,ngBootstrap,withinviewport,common) { 'use strict';

    withinviewport = withinviewport && withinviewport.hasOwnProperty('default') ? withinviewport['default'] : withinviewport;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgbTourService = (function (_super) {
        tslib_1.__extends(NgbTourService, _super);
        function NgbTourService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NgbTourService.decorators = [
            { type: core.Injectable },
        ];
        return NgbTourService;
    }(ngxTourCore.TourService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourStepTemplateService = (function () {
        function TourStepTemplateService() {
        }
        TourStepTemplateService.decorators = [
            { type: core.Injectable },
        ];
        return TourStepTemplateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourAnchorNgBootstrapPopoverDirective = (function (_super) {
        tslib_1.__extends(TourAnchorNgBootstrapPopoverDirective, _super);
        function TourAnchorNgBootstrapPopoverDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TourAnchorNgBootstrapPopoverDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[tourAnchor]' },] },
        ];
        return TourAnchorNgBootstrapPopoverDirective;
    }(ngBootstrap.NgbPopover));
    var TourAnchorNgBootstrapDirective = (function () {
        function TourAnchorNgBootstrapDirective(tourService, tourStepTemplate, element, popoverDirective) {
            this.tourService = tourService;
            this.tourStepTemplate = tourStepTemplate;
            this.element = element;
            this.popoverDirective = popoverDirective;
            this.popoverDirective.toggle = function () { };
        }
        /**
         * @return {?}
         */
        TourAnchorNgBootstrapDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.tourService.register(this.tourAnchor, this);
            };
        /**
         * @return {?}
         */
        TourAnchorNgBootstrapDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.tourService.unregister(this.tourAnchor);
            };
        /**
         * @param {?} step
         * @return {?}
         */
        TourAnchorNgBootstrapDirective.prototype.showTourStep = /**
         * @param {?} step
         * @return {?}
         */
            function (step) {
                this.isActive = true;
                this.popoverDirective.ngbPopover = this.tourStepTemplate.template;
                this.popoverDirective.popoverTitle = step.title;
                this.popoverDirective.container = 'body';
                this.popoverDirective.placement = /** @type {?} */ ((step.placement || 'top')
                    .replace('before', 'left').replace('after', 'right')
                    .replace('below', 'bottom').replace('above', 'top'));
                step.prevBtnTitle = step.prevBtnTitle || 'Prev';
                step.nextBtnTitle = step.nextBtnTitle || 'Next';
                step.endBtnTitle = step.endBtnTitle || 'End';
                this.popoverDirective.open({ step: step });
                if (!step.preventScrolling) {
                    if (!withinviewport(this.element.nativeElement, { sides: 'bottom' })) {
                        ((this.element.nativeElement)).scrollIntoView(false);
                    }
                    else if (!withinviewport(this.element.nativeElement, { sides: 'left top right' })) {
                        ((this.element.nativeElement)).scrollIntoView(true);
                    }
                }
            };
        /**
         * @return {?}
         */
        TourAnchorNgBootstrapDirective.prototype.hideTourStep = /**
         * @return {?}
         */
            function () {
                this.isActive = false;
                this.popoverDirective.close();
            };
        TourAnchorNgBootstrapDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[tourAnchor]',
                    },] },
        ];
        /** @nocollapse */
        TourAnchorNgBootstrapDirective.ctorParameters = function () {
            return [
                { type: NgbTourService, },
                { type: TourStepTemplateService, },
                { type: core.ElementRef, },
                { type: TourAnchorNgBootstrapPopoverDirective, decorators: [{ type: core.Host },] },
            ];
        };
        TourAnchorNgBootstrapDirective.propDecorators = {
            "tourAnchor": [{ type: core.Input },],
            "isActive": [{ type: core.HostBinding, args: ['class.touranchor--is-active',] },],
        };
        return TourAnchorNgBootstrapDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourStepTemplateComponent = (function (_super) {
        tslib_1.__extends(TourStepTemplateComponent, _super);
        function TourStepTemplateComponent(tourStepTemplateService, tourService) {
            var _this = _super.call(this, tourService) || this;
            _this.tourStepTemplateService = tourStepTemplateService;
            _this.tourService = tourService;
            return _this;
        }
        /**
         * @return {?}
         */
        TourStepTemplateComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.tourStepTemplateService.template = this.stepTemplate || this.defaultTourStepTemplate;
            };
        TourStepTemplateComponent.decorators = [
            { type: core.Component, args: [{
                        encapsulation: core.ViewEncapsulation.None,
                        selector: 'tour-step-template',
                        template: "\n    <ng-template #tourStep let-step=\"step\">\n      <p class=\"tour-step-content\">{{step?.content}}</p>\n      <div class=\"tour-step-navigation\">\n        <button *ngIf=\"tourService.hasPrev(step)\" class=\"btn btn-sm btn-default\" (click)=\"tourService.prev()\">\u00AB {{step?.prevBtnTitle}}</button>\n        <button *ngIf=\"tourService.hasNext(step)\" class=\"btn btn-sm btn-default\" (click)=\"tourService.next()\">{{step?.nextBtnTitle}} \u00BB</button>\n        <button class=\"btn btn-sm btn-default\" (click)=\"tourService.end()\">{{step?.endBtnTitle}}</button>\n      </div>\n    </ng-template>\n  ",
                    },] },
        ];
        /** @nocollapse */
        TourStepTemplateComponent.ctorParameters = function () {
            return [
                { type: TourStepTemplateService, },
                { type: NgbTourService, },
            ];
        };
        TourStepTemplateComponent.propDecorators = {
            "defaultTourStepTemplate": [{ type: core.ViewChild, args: ['tourStep', { read: core.TemplateRef },] },],
            "stepTemplate": [{ type: core.Input }, { type: core.ContentChild, args: [core.TemplateRef,] },],
        };
        return TourStepTemplateComponent;
    }(ngxTourCore.TourHotkeyListenerComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TourNgBootstrapModule = (function () {
        function TourNgBootstrapModule() {
        }
        /**
         * @return {?}
         */
        TourNgBootstrapModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: TourNgBootstrapModule,
                    providers: tslib_1.__spread([
                        TourStepTemplateService
                    ], ngxTourCore.TourModule.forRoot().providers, [
                        NgbTourService
                    ]),
                };
            };
        TourNgBootstrapModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [TourAnchorNgBootstrapDirective, TourAnchorNgBootstrapPopoverDirective, TourStepTemplateComponent],
                        exports: [TourAnchorNgBootstrapDirective, TourAnchorNgBootstrapPopoverDirective, TourStepTemplateComponent],
                        imports: [common.CommonModule, ngBootstrap.NgbPopoverModule.forRoot()],
                    },] },
        ];
        return TourNgBootstrapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.TourService = NgbTourService;
    exports.TourNgBootstrapModule = TourNgBootstrapModule;
    exports.TourAnchorNgBootstrapDirective = TourAnchorNgBootstrapDirective;
    exports.TourStepTemplateComponent = TourStepTemplateComponent;
    exports.ɵa = NgbTourService;
    exports.ɵb = TourAnchorNgBootstrapPopoverDirective;
    exports.ɵc = TourStepTemplateService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,