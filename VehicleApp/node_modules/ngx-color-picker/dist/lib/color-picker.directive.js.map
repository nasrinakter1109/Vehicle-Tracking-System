{"version":3,"file":"color-picker.directive.js","sourceRoot":"","sources":["../../src/lib/color-picker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, OnChanges, OnDestroy, Input, Output, EventEmitter,\n  HostListener, ApplicationRef, ComponentRef, ElementRef, ViewContainerRef,\n  Injector, ReflectiveInjector, ComponentFactoryResolver } from '@angular/core';\n\nimport { AlphaChannel, OutputFormat } from './helpers';\n\nimport { ColorPickerService } from './color-picker.service';\nimport { ColorPickerComponent } from './color-picker.component';\n\n@Directive({\n  selector: '[colorPicker]',\n  exportAs: 'ngxColorPicker'\n})\nexport class ColorPickerDirective implements OnChanges, OnDestroy {\n  private dialog: any;\n\n  private dialogCreated: boolean = false;\n  private ignoreChanges: boolean = false;\n\n  private cmpRef: ComponentRef<ColorPickerComponent>;\n\n  @Input() colorPicker: string;\n\n  @Input() cpWidth: string = '230px';\n  @Input() cpHeight: string = 'auto';\n\n  @Input() cpToggle: boolean = false;\n  @Input() cpDisabled: boolean = false;\n\n  @Input() cpIgnoredElements: any = [];\n\n  @Input() cpDisableInput: boolean = false;\n\n  @Input() cpOutputFormat: OutputFormat = 'auto';\n  @Input() cpAlphaChannel: AlphaChannel = 'enabled';\n\n  @Input() cpFallbackColor: string = '#fff';\n\n  @Input() cpDialogDisplay: string = 'popup';\n\n  @Input() cpSaveClickOutside: boolean = true;\n\n  @Input() cpUseRootViewContainer: boolean = false;\n\n  @Input() cpPosition: string = 'right';\n  @Input() cpPositionOffset: string = '0%';\n  @Input() cpPositionRelativeToArrow: boolean = false;\n\n  @Input() cpOKButton: boolean = false;\n  @Input() cpOKButtonText: string = 'OK';\n  @Input() cpOKButtonClass: string = 'cp-ok-button-class';\n\n  @Input() cpCancelButton: boolean = false;\n  @Input() cpCancelButtonText: string = 'Cancel';\n  @Input() cpCancelButtonClass: string = 'cp-cancel-button-class';\n\n  @Input() cpPresetLabel: string = 'Preset colors';\n  @Input() cpPresetColors: string[];\n  @Input() cpMaxPresetColorsLength: number = 6;\n\n  @Input() cpPresetEmptyMessage: string = 'No colors added';\n  @Input() cpPresetEmptyMessageClass: string = 'preset-empty-message';\n\n  @Input() cpAddColorButton: boolean = false;\n  @Input() cpAddColorButtonText: string = 'Add color';\n  @Input() cpAddColorButtonClass: string = 'cp-add-color-button-class';\n\n  @Input() cpRemoveColorButtonClass: string = 'cp-remove-color-button-class';\n\n  @Output() cpInputChange = new EventEmitter<any>(true);\n\n  @Output() cpToggleChange = new EventEmitter<boolean>(true);\n\n  @Output() cpSliderChange = new EventEmitter<any>(true);\n  @Output() cpSliderDragEnd = new EventEmitter<string>(true);\n  @Output() cpSliderDragStart = new EventEmitter<string>(true);\n\n  @Output() colorPickerOpen = new EventEmitter<string>(true);\n  @Output() colorPickerClose = new EventEmitter<string>(true);\n\n  @Output() colorPickerCancel = new EventEmitter<string>(true);\n  @Output() colorPickerSelect = new EventEmitter<string>(true);\n  @Output() colorPickerChange = new EventEmitter<string>(false);\n\n  @Output() cpPresetColorsChange = new EventEmitter<any>(true);\n\n  @HostListener('click', ['$event']) handleClick(event: any): void {\n    this.inputFocus(event);\n  }\n\n  @HostListener('focus', ['$event']) handleFocus(event: any): void {\n    this.inputFocus(event);\n  }\n\n  @HostListener('input', ['$event']) handleInput(event: any): void {\n    this.inputChange(event);\n  }\n\n  constructor(private injector: Injector, private cfr: ComponentFactoryResolver,\n    private appRef: ApplicationRef, private vcRef: ViewContainerRef, private elRef: ElementRef,\n    private _service: ColorPickerService) {}\n\n  ngOnDestroy(): void {\n    if (this.cmpRef !== undefined) {\n      this.cmpRef.destroy();\n    }\n  }\n\n  ngOnChanges(changes: any): void {\n    if (changes.cpToggle && !this.cpDisabled) {\n      if (changes.cpToggle.currentValue) {\n        this.openDialog();\n      } else if (!changes.cpToggle.currentValue) {\n        this.closeDialog();\n      }\n    }\n\n    if (changes.colorPicker) {\n      if (this.dialog && !this.ignoreChanges) {\n        if (this.cpDialogDisplay === 'inline') {\n          this.dialog.setInitialColor(changes.colorPicker.currentValue);\n        }\n\n        this.dialog.setColorFromString(changes.colorPicker.currentValue, false);\n\n        if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {\n          this.cmpRef.changeDetectorRef.detectChanges();\n        }\n      }\n\n      this.ignoreChanges = false;\n    }\n\n    if (changes.cpPresetLabel || changes.cpPresetColors) {\n      if (this.dialog) {\n        this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);\n      }\n    }\n  }\n\n  public openDialog(): void {\n    if (!this.dialogCreated) {\n      let vcRef = this.vcRef;\n\n      this.dialogCreated = true;\n\n      if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {\n        const classOfRootComponent = this.appRef.componentTypes[0];\n        const appInstance = this.injector.get(classOfRootComponent);\n\n        vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;\n\n        if (vcRef === this.vcRef) {\n          console.warn('You are using cpUseRootViewContainer, ' +\n            'but the root component is not exposing viewContainerRef!' +\n            'Please expose it by adding \\'public vcRef: ViewContainerRef\\' to the constructor.');\n        }\n      }\n\n      const compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);\n      const injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);\n\n      this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);\n\n      this.cmpRef.instance.setupDialog(this, this.elRef, this.colorPicker,\n        this.cpWidth, this.cpHeight, this.cpDialogDisplay, this.cpFallbackColor,\n        this.cpAlphaChannel, this.cpOutputFormat, this.cpDisableInput,\n        this.cpIgnoredElements, this.cpSaveClickOutside, this.cpUseRootViewContainer,\n        this.cpPosition, this.cpPositionOffset, this.cpPositionRelativeToArrow,\n        this.cpPresetLabel, this.cpPresetColors, this.cpMaxPresetColorsLength,\n        this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass,\n        this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText,\n        this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText,\n        this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText,\n        this.cpRemoveColorButtonClass);\n\n      this.dialog = this.cmpRef.instance;\n\n      if (this.vcRef !== vcRef) {\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    } else if (this.dialog) {\n      this.dialog.openDialog(this.colorPicker);\n    }\n  }\n\n  public closeDialog(): void {\n    if (this.dialog && this.cpDialogDisplay === 'popup') {\n      this.dialog.closeDialog();\n    }\n  }\n\n  public stateChanged(state: boolean): void {\n    this.cpToggleChange.emit(state);\n\n    if (state) {\n      this.colorPickerOpen.emit(this.colorPicker);\n    } else {\n      this.colorPickerClose.emit(this.colorPicker);\n    }\n  }\n\n  public colorChanged(value: string, ignore: boolean = true): void {\n    this.ignoreChanges = ignore;\n\n    this.colorPickerChange.emit(value);\n  }\n\n  public colorCanceled(): void {\n    this.colorPickerCancel.emit();\n  }\n\n  public colorSelected(value: string): void {\n    this.colorPickerSelect.emit(value);\n  }\n\n  public inputFocus(event: any): void {\n    const element = this.elRef.nativeElement;\n\n    const ignored = this.cpIgnoredElements.filter((item: any) => item === element);\n\n    if (!this.cpDisabled && !ignored.length) {\n      if (typeof document !== 'undefined' && element === document.activeElement) {\n        this.openDialog();\n      } else if (!this.dialog || !this.dialog.show) {\n        this.openDialog();\n      } else {\n        this.closeDialog();\n      }\n    }\n  }\n\n  public inputChange(event: any): void {\n    if (this.dialog) {\n      this.dialog.setColorFromString(event.target.value, true);\n    } else {\n      this.colorPicker = event.target.value;\n\n      this.colorPickerChange.emit(this.colorPicker);\n    }\n  }\n\n  public inputChanged(event: any): void {\n    this.cpInputChange.emit(event);\n  }\n\n  public sliderChanged(event: any): void {\n    this.cpSliderChange.emit(event);\n  }\n\n  public sliderDragEnd(event: any): void {\n    this.cpSliderDragEnd.emit(event);\n  }\n\n  public sliderDragStart(event: any): void {\n    this.cpSliderDragStart.emit(event);\n  }\n\n  public presetColorsChanged(value: any[]): void {\n    this.cpPresetColorsChange.emit(value);\n  }\n}\n"]}