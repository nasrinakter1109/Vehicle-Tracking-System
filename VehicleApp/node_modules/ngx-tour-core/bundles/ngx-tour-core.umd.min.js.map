{"version":3,"sources":["ng://ngx-tour-core/lib/tour.service.ts","ng://ngx-tour-core/lib/tour-hotkey-listener.component.ts","ng://ngx-tour-core/lib/tour.module.ts"],"names":["TourService","router","this","Subject","mergeStatic","stepShow$","pipe","map","value","name","stepHide$","initialize$","start$","end$","pause$","resume$","anchorRegister$","anchorUnregister$","TourState","OFF","prototype","initialize","steps","stepDefaults","length","status","step","Object","assign","next","disableHotkeys","isHotKeysEnabled","enableHotkeys","start","startAt","stepId","ON","goToStep","loadStep","events","filter","event","NavigationStart","first","subscribe","_this","currentStep","hideStep","end","undefined","pause","PAUSED","resume","showStep","toggle","hasNext","nextStep","indexOf","console","warn","prev","hasPrev","prevStep","goto","register","anchorId","anchor","anchors","Error","unregister","getStatus","isHotkeysEnabled","navigatePromise","Promise","resolve","route","navigateByUrl","Array","isArray","navigate","then","navigated","setTimeout","setCurrentStep","find","showTourStep","hideTourStep","Injectable","Router","TourHotkeyListenerComponent","tourService","onEscapeKey","onArrowRightKey","onArrowLeftKey","Component","args","selector","template","HostListener","TourModule","forRoot","ngModule","providers","NgModule","declarations","exports","imports","CommonModule","RouterModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NavigationStart, Router, UrlSegment } from '@angular/router';\n\nimport { TourAnchorDirective } from './tour-anchor.directive';\nimport { Subject, Observable, merge as mergeStatic } from 'rxjs';\nimport { first, map, filter } from 'rxjs/operators';\n\nexport interface IStepOption {\n  stepId?: string;\n  anchorId?: string;\n  title?: string;\n  content?: string;\n  route?: string | UrlSegment[];\n  nextStep?: number | string;\n  prevStep?: number | string;\n  placement?: any;\n  preventScrolling?: boolean;\n  prevBtnTitle?: string;\n  nextBtnTitle?: string;\n  endBtnTitle?: string;\n}\n\nexport enum TourState {\n  OFF,\n  ON,\n  PAUSED\n}\n\n@Injectable()\nexport class TourService<T extends IStepOption = IStepOption> {\n  public stepShow$: Subject<T> = new Subject();\n  public stepHide$: Subject<T> = new Subject();\n  public initialize$: Subject<T[]> = new Subject();\n  public start$: Subject<T> = new Subject();\n  public end$: Subject<any> = new Subject();\n  public pause$: Subject<T> = new Subject();\n  public resume$: Subject<T> = new Subject();\n  public anchorRegister$: Subject<string> = new Subject();\n  public anchorUnregister$: Subject<string> = new Subject();\n  public events$: Observable<{ name: string; value: any }> = mergeStatic(\n    this.stepShow$.pipe(map(value => ({ name: 'stepShow', value }))),\n    this.stepHide$.pipe(map(value => ({ name: 'stepHide', value }))),\n    this.initialize$.pipe(map(value => ({ name: 'initialize', value }))),\n    this.start$.pipe(map(value => ({ name: 'start', value }))),\n    this.end$.pipe(map(value => ({ name: 'end', value }))),\n    this.pause$.pipe(map(value => ({ name: 'pause', value }))),\n    this.resume$.pipe(map(value => ({ name: 'resume', value }))),\n    this.anchorRegister$.pipe(\n      map(value => ({\n        name: 'anchorRegister',\n        value\n      }))\n    ),\n    this.anchorUnregister$.pipe(\n      map(value => ({\n        name: 'anchorUnregister',\n        value\n      }))\n    )\n  );\n\n  public steps: T[] = [];\n  public currentStep: T;\n\n  public anchors: { [anchorId: string]: TourAnchorDirective } = {};\n  private status: TourState = TourState.OFF;\n  private isHotKeysEnabled = true;\n\n  constructor(private router: Router) {}\n\n  public initialize(steps: T[], stepDefaults?: T): void {\n    if (steps && steps.length > 0) {\n      this.status = TourState.OFF;\n      this.steps = steps.map(step => Object.assign({}, stepDefaults, step));\n      this.initialize$.next(this.steps);\n    }\n  }\n\n  public disableHotkeys(): void {\n    this.isHotKeysEnabled = false;\n  }\n\n  public enableHotkeys(): void {\n    this.isHotKeysEnabled = true;\n  }\n\n  public start(): void {\n    this.startAt(0);\n  }\n\n  public startAt(stepId: number | string): void {\n    this.status = TourState.ON;\n    this.goToStep(this.loadStep(stepId));\n    this.start$.next();\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationStart), first())\n      .subscribe(() => {\n        if (this.currentStep) {\n          this.hideStep(this.currentStep);\n        }\n      });\n  }\n\n  public end(): void {\n    this.status = TourState.OFF;\n    this.hideStep(this.currentStep);\n    this.currentStep = undefined;\n    this.end$.next();\n  }\n\n  public pause(): void {\n    this.status = TourState.PAUSED;\n    this.hideStep(this.currentStep);\n    this.pause$.next();\n  }\n\n  public resume(): void {\n    this.status = TourState.ON;\n    this.showStep(this.currentStep);\n    this.resume$.next();\n  }\n\n  public toggle(pause?: boolean): void {\n    if (pause) {\n      if (this.currentStep) {\n        this.pause();\n      } else {\n        this.resume();\n      }\n    } else {\n      if (this.currentStep) {\n        this.end();\n      } else {\n        this.start();\n      }\n    }\n  }\n\n  public next(): void {\n    if (this.hasNext(this.currentStep)) {\n      this.goToStep(\n        this.loadStep(\n          this.currentStep.nextStep || this.steps.indexOf(this.currentStep) + 1\n        )\n      );\n    }\n  }\n\n  public hasNext(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get next step. No currentStep.');\n      return false;\n    }\n    return (\n      step.nextStep !== undefined ||\n      this.steps.indexOf(step) < this.steps.length - 1\n    );\n  }\n\n  public prev(): void {\n    if (this.hasPrev(this.currentStep)) {\n      this.goToStep(\n        this.loadStep(\n          this.currentStep.prevStep || this.steps.indexOf(this.currentStep) - 1\n        )\n      );\n    }\n  }\n\n  public hasPrev(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get previous step. No currentStep.');\n      return false;\n    }\n    return step.prevStep !== undefined || this.steps.indexOf(step) > 0;\n  }\n\n  public goto(stepId: number | string): void {\n    this.goToStep(this.loadStep(stepId));\n  }\n\n  public register(anchorId: string, anchor: TourAnchorDirective): void {\n    if (this.anchors[anchorId]) {\n      throw new Error('anchorId ' + anchorId + ' already registered!');\n    }\n    this.anchors[anchorId] = anchor;\n    this.anchorRegister$.next(anchorId);\n  }\n\n  public unregister(anchorId: string): void {\n    delete this.anchors[anchorId];\n    this.anchorUnregister$.next(anchorId);\n  }\n\n  public getStatus(): TourState {\n    return this.status;\n  }\n\n  public isHotkeysEnabled(): boolean {\n    return this.isHotKeysEnabled;\n  }\n\n  private goToStep(step: T): void {\n    if (!step) {\n      console.warn('Can\\'t go to non-existent step');\n      this.end();\n      return;\n    }\n    let navigatePromise: Promise<boolean> = new Promise(resolve =>\n      resolve(true)\n    );\n    if (step.route !== undefined && typeof step.route === 'string') {\n      navigatePromise = this.router.navigateByUrl(step.route);\n    } else if (step.route && Array.isArray(step.route)) {\n      navigatePromise = this.router.navigate(step.route);\n    }\n    navigatePromise.then(navigated => {\n      if (navigated !== false) {\n        setTimeout(() => this.setCurrentStep(step));\n      }\n    });\n  }\n\n  private loadStep(stepId: number | string): T {\n    if (typeof stepId === 'number') {\n      return this.steps[stepId];\n    } else {\n      return this.steps.find(step => step.stepId === stepId);\n    }\n  }\n\n  private setCurrentStep(step: T): void {\n    if (this.currentStep) {\n      this.hideStep(this.currentStep);\n    }\n    this.currentStep = step;\n    this.showStep(this.currentStep);\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationStart), first())\n      .subscribe(() => {\n        if (this.currentStep) {\n          this.hideStep(this.currentStep);\n        }\n      });\n  }\n\n  private showStep(step: T): void {\n    const anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      console.warn(\n        'Can\\'t attach to unregistered anchor with id ' + step.anchorId\n      );\n      this.end();\n      return;\n    }\n    anchor.showTourStep(step);\n    this.stepShow$.next(step);\n  }\n\n  private hideStep(step: T): void {\n    const anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      return;\n    }\n    anchor.hideTourStep();\n    this.stepHide$.next(step);\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { TourService, TourState } from './tour.service';\n\n@Component({\n  selector: 'tour-hotkey-listener',\n  template: `<ng-content></ng-content>`\n})\nexport class TourHotkeyListenerComponent {\n  constructor(public tourService: TourService) {}\n\n  /**\n   * Configures hot keys for controlling the tour with the keyboard\n   */\n  @HostListener('window:keydown.Escape')\n  public onEscapeKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.end();\n    }\n  }\n\n  @HostListener('window:keydown.ArrowRight')\n  public onArrowRightKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.hasNext(this.tourService.currentStep) &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.next();\n    }\n  }\n\n  @HostListener('window:keydown.ArrowLeft')\n  public onArrowLeftKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.hasPrev(this.tourService.currentStep) &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.prev();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { TourHotkeyListenerComponent } from './tour-hotkey-listener.component';\nimport { TourService } from './tour.service';\n\n@NgModule({\n    declarations: [TourHotkeyListenerComponent],\n    exports: [TourHotkeyListenerComponent],\n    imports: [CommonModule, RouterModule],\n})\nexport class TourModule {\n    public static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TourModule,\n            providers: [\n                TourService,\n            ],\n        };\n    }\n};\n\nexport { TourService };\n"]}