/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { animate, keyframes, state, style, transition, trigger, } from '@angular/animations';
import { Component, ElementRef, Input, ViewChild, } from '@angular/core';
import { buildLinearPath, buildSmoothPath } from '../helpers/DOM.helpers';
import { normalize } from '../helpers/math.helpers';
import { generateId } from '../helpers/misc.helpers';
import { normalizeDataset } from './trend.helpers';
var TrendComponent = /** @class */ (function () {
    function TrendComponent() {
        this.autoDraw = false;
        this.autoDrawDuration = 2000;
        this.autoDrawEasing = 'ease';
        this.padding = 8;
        this.radius = 10;
        this.stroke = 'black';
        this.strokeLinecap = '';
        this.strokeWidth = 1;
        this.gradient = [];
        this.svgWidth = '100%';
        this.svgHeight = '25%';
        this.animationState = '';
        this.id = generateId();
        this.gradientId = "ngx-trend-vertical-gradient-" + this.id;
    }
    /**
     * @return {?}
     */
    TrendComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // We need at least 2 points to draw a graph.
        if (!this.data || this.data.length < 2) {
            return;
        }
        /** @type {?} */
        var plainValues = this.data.map(function (point) {
            if (typeof point === 'number') {
                return point;
            }
            return point.value;
        });
        /** @type {?} */
        var viewBoxWidth = this.width || 300;
        /** @type {?} */
        var viewBoxHeight = this.height || 75;
        this.svgWidth = this.width || '100%';
        this.svgHeight = this.height || '25%';
        this.viewBox = "0 0 " + viewBoxWidth + " " + viewBoxHeight;
        /** @type {?} */
        var root = location.href.split(location.hash || '#')[0];
        this.pathStroke = (this.gradient && this.gradient.length) ? "url('" + root + "#" + this.gradientId + "')" : undefined;
        this.gradientTrimmed = this.gradient.slice().reverse().map(function (val, idx) {
            return {
                idx: idx,
                stopColor: val,
                offset: normalize(idx, 0, _this.gradient.length - 1 || 1),
            };
        });
        /** @type {?} */
        var normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, 
        // NOTE: Because SVGs are indexed from the top left, but most data is
        // indexed from the bottom left, we're inverting the Y min/max.
        viewBoxHeight - this.padding, this.padding);
        if (this.autoDraw && this.animationState !== 'active') {
            this.animationState = 'inactive';
            setTimeout(function () {
                _this.lineLength = _this.pathEl.nativeElement.getTotalLength();
                _this.animationState = 'active';
            });
        }
        this.d = this.smooth
            ? buildSmoothPath(normalizedValues, this.radius)
            : buildLinearPath(normalizedValues);
    };
    TrendComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-trend',
                    template: "\n  <svg *ngIf=\"data && data.length >= 2\"\n    [attr.width]=\"svgWidth\"\n    [attr.height]=\"svgHeight\"\n    [attr.stroke]=\"stroke\"\n    [attr.stroke-width]=\"strokeWidth\"\n    [attr.stroke-linecap]=\"strokeLinecap\"\n    [attr.viewBox]=\"viewBox\"\n    [attr.preserveAspectRatio]=\"preserveAspectRatio\"\n  >\n    <defs *ngIf=\"gradient && gradient.length\">\n      <linearGradient [attr.id]=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop\n          *ngFor=\"let g of gradientTrimmed;\"\n          [attr.key]=\"g.idx\"\n          [attr.offset]=\"g.offset\"\n          [attr.stop-color]=\"g.stopColor\"\n        />\n      </linearGradient>\n    </defs>\n    <path fill=\"none\" #pathEl\n      [attr.stroke]=\"pathStroke\" [attr.d]=\"d\"\n      [@pathAnimaiton]=\"{\n        value: animationState,\n        params: {\n          autoDrawDuration: autoDrawDuration,\n          autoDrawEasing: autoDrawEasing,\n          lineLength: lineLength\n        }\n      }\" />\n  </svg>\n  ",
                    animations: [
                        trigger('pathAnimaiton', [
                            state('inactive', style({ display: 'none' })),
                            transition('* => active', [
                                style({ display: 'initial' }),
                                // We do the animation using the dash array/offset trick
                                // https://css-tricks.com/svg-line-animation-works/
                                animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                                    style({
                                        'stroke-dasharray': '{{ lineLength }}px',
                                        'stroke-dashoffset': '{{ lineLength }}px',
                                    }),
                                    style({
                                        'stroke-dasharray': '{{ lineLength }}px',
                                        'stroke-dashoffset': 0,
                                    }),
                                ])),
                                // One unfortunate side-effect of the auto-draw is that the line is
                                // actually 1 big dash, the same length as the line itself. If the
                                // line length changes (eg. radius change, new data), that dash won't
                                // be the same length anymore. We can fix that by removing those
                                // properties once the auto-draw is completed.
                                style({
                                    'stroke-dashoffset': '',
                                    'stroke-dasharray': '',
                                }),
                            ]),
                        ]),
                    ]
                }] }
    ];
    /** @nocollapse */
    TrendComponent.ctorParameters = function () { return []; };
    TrendComponent.propDecorators = {
        data: [{ type: Input }],
        smooth: [{ type: Input }],
        autoDraw: [{ type: Input }],
        autoDrawDuration: [{ type: Input }],
        autoDrawEasing: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        padding: [{ type: Input }],
        radius: [{ type: Input }],
        stroke: [{ type: Input }],
        strokeLinecap: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        gradient: [{ type: Input }],
        preserveAspectRatio: [{ type: Input }],
        pathEl: [{ type: ViewChild, args: ['pathEl',] }]
    };
    return TrendComponent;
}());
export { TrendComponent };
if (false) {
    /** @type {?} */
    TrendComponent.prototype.id;
    /** @type {?} */
    TrendComponent.prototype.data;
    /** @type {?} */
    TrendComponent.prototype.smooth;
    /** @type {?} */
    TrendComponent.prototype.autoDraw;
    /** @type {?} */
    TrendComponent.prototype.autoDrawDuration;
    /** @type {?} */
    TrendComponent.prototype.autoDrawEasing;
    /** @type {?} */
    TrendComponent.prototype.width;
    /** @type {?} */
    TrendComponent.prototype.height;
    /** @type {?} */
    TrendComponent.prototype.padding;
    /** @type {?} */
    TrendComponent.prototype.radius;
    /** @type {?} */
    TrendComponent.prototype.stroke;
    /** @type {?} */
    TrendComponent.prototype.strokeLinecap;
    /** @type {?} */
    TrendComponent.prototype.strokeWidth;
    /** @type {?} */
    TrendComponent.prototype.gradient;
    /** @type {?} */
    TrendComponent.prototype.preserveAspectRatio;
    /** @type {?} */
    TrendComponent.prototype.pathEl;
    /** @type {?} */
    TrendComponent.prototype.gradientTrimmed;
    /** @type {?} */
    TrendComponent.prototype.d;
    /** @type {?} */
    TrendComponent.prototype.svgWidth;
    /** @type {?} */
    TrendComponent.prototype.svgHeight;
    /** @type {?} */
    TrendComponent.prototype.viewBox;
    /** @type {?} */
    TrendComponent.prototype.pathStroke;
    /** @type {?} */
    TrendComponent.prototype.gradientId;
    /** @type {?} */
    TrendComponent.prototype.lineLength;
    /** @type {?} */
    TrendComponent.prototype.animationState;
}

//# sourceMappingURL=data:application/json;base64,