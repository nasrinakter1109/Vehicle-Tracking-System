/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { checkForCollinearPoints, getDistanceBetween, moveTo, } from './math.helpers';
/** @type {?} */
export const buildLinearPath = (data) => data.reduce((path, point, index) => {
    /** @type {?} */
    const isFirstInstruction = index === 0;
    /** @type {?} */
    const instruction = isFirstInstruction ? 'M' : 'L';
    return `${path}${instruction} ${point.x},${point.y}\n`;
}, '');
/**
 * @param {?} data
 * @param {?} radius
 * @return {?}
 */
export function buildSmoothPath(data, radius) {
    const [firstPoint, ...otherPoints] = data;
    return otherPoints.reduce((path, point, index) => {
        /** @type {?} */
        const next = otherPoints[index + 1];
        /** @type {?} */
        const prev = otherPoints[index - 1] || firstPoint;
        /** @type {?} */
        const isCollinear = next && checkForCollinearPoints(prev, point, next);
        if (!next || isCollinear) {
            // The very last line in the sequence can just be a regular line.
            return `${path}\nL ${point.x},${point.y}`;
        }
        /** @type {?} */
        const distanceFromPrev = getDistanceBetween(prev, point);
        /** @type {?} */
        const distanceFromNext = getDistanceBetween(next, point);
        /** @type {?} */
        const threshold = Math.min(distanceFromPrev, distanceFromNext);
        /** @type {?} */
        const isTooCloseForRadius = threshold / 2 < radius;
        /** @type {?} */
        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;
        /** @type {?} */
        const before = moveTo(prev, point, radiusForPoint);
        /** @type {?} */
        const after = moveTo(next, point, radiusForPoint);
        return [
            path,
            `L ${before.x},${before.y}`,
            `S ${point.x},${point.y} ${after.x},${after.y}`,
        ].join('\n');
    }, `M ${firstPoint.x},${firstPoint.y}`);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9NLmhlbHBlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdHJlbmQvIiwic291cmNlcyI6WyJoZWxwZXJzL0RPTS5oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixNQUFNLEdBRVAsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFeEIsYUFBYSxlQUFlLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBRSxDQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTs7SUFHakMsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDOztJQUN2QyxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFFbkQsT0FBTyxHQUFHLElBQUksR0FBRyxXQUFXLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7Q0FDeEQsRUFBRSxFQUFFLENBQUMsQ0FBQzs7Ozs7O0FBRVQsTUFBTSwwQkFBMEIsSUFBYSxFQUFFLE1BQWM7SUFDM0QsTUFBTSxDQUFDLFVBQVUsRUFBRSxHQUFHLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUUxQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFOztRQUMvQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDOztRQUNwQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQzs7UUFFbEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLHVCQUF1QixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLElBQUksSUFBSSxXQUFXLEVBQUU7O1lBRXhCLE9BQU8sR0FBRyxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDM0M7O1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7O1FBQ3pELE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDOztRQUN6RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUM7O1FBRS9ELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7O1FBRW5ELE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7O1FBRXBFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztRQUNuRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztRQUVsRCxPQUFPO1lBQ0wsSUFBSTtZQUNKLEtBQUssTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQzNCLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRTtTQUNoRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNkLEVBQUUsS0FBSyxVQUFVLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY2hlY2tGb3JDb2xsaW5lYXJQb2ludHMsXG4gIGdldERpc3RhbmNlQmV0d2VlbixcbiAgbW92ZVRvLFxuICBQb2ludCxcbn0gZnJvbSAnLi9tYXRoLmhlbHBlcnMnO1xuXG5leHBvcnQgY29uc3QgYnVpbGRMaW5lYXJQYXRoID0gKGRhdGE6IFBvaW50W10pID0+XG4gIGRhdGEucmVkdWNlKChwYXRoLCBwb2ludCwgaW5kZXgpID0+IHtcbiAgICAvLyBUaGUgdmVyeSBmaXJzdCBpbnN0cnVjdGlvbiBuZWVkcyB0byBiZSBhIFwibW92ZVwiLlxuICAgIC8vIFRoZSByZXN0IHdpbGwgYmUgYSBcImxpbmVcIi5cbiAgICBjb25zdCBpc0ZpcnN0SW5zdHJ1Y3Rpb24gPSBpbmRleCA9PT0gMDtcbiAgICBjb25zdCBpbnN0cnVjdGlvbiA9IGlzRmlyc3RJbnN0cnVjdGlvbiA/ICdNJyA6ICdMJztcblxuICAgIHJldHVybiBgJHtwYXRofSR7aW5zdHJ1Y3Rpb259ICR7cG9pbnQueH0sJHtwb2ludC55fVxcbmA7XG4gIH0sICcnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkU21vb3RoUGF0aChkYXRhOiBQb2ludFtdLCByYWRpdXM6IG51bWJlcikge1xuICBjb25zdCBbZmlyc3RQb2ludCwgLi4ub3RoZXJQb2ludHNdID0gZGF0YTtcblxuICByZXR1cm4gb3RoZXJQb2ludHMucmVkdWNlKChwYXRoLCBwb2ludCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBuZXh0ID0gb3RoZXJQb2ludHNbaW5kZXggKyAxXTtcbiAgICBjb25zdCBwcmV2ID0gb3RoZXJQb2ludHNbaW5kZXggLSAxXSB8fCBmaXJzdFBvaW50O1xuXG4gICAgY29uc3QgaXNDb2xsaW5lYXIgPSBuZXh0ICYmIGNoZWNrRm9yQ29sbGluZWFyUG9pbnRzKHByZXYsIHBvaW50LCBuZXh0KTtcblxuICAgIGlmICghbmV4dCB8fCBpc0NvbGxpbmVhcikge1xuICAgICAgLy8gVGhlIHZlcnkgbGFzdCBsaW5lIGluIHRoZSBzZXF1ZW5jZSBjYW4ganVzdCBiZSBhIHJlZ3VsYXIgbGluZS5cbiAgICAgIHJldHVybiBgJHtwYXRofVxcbkwgJHtwb2ludC54fSwke3BvaW50Lnl9YDtcbiAgICB9XG5cbiAgICBjb25zdCBkaXN0YW5jZUZyb21QcmV2ID0gZ2V0RGlzdGFuY2VCZXR3ZWVuKHByZXYsIHBvaW50KTtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21OZXh0ID0gZ2V0RGlzdGFuY2VCZXR3ZWVuKG5leHQsIHBvaW50KTtcbiAgICBjb25zdCB0aHJlc2hvbGQgPSBNYXRoLm1pbihkaXN0YW5jZUZyb21QcmV2LCBkaXN0YW5jZUZyb21OZXh0KTtcblxuICAgIGNvbnN0IGlzVG9vQ2xvc2VGb3JSYWRpdXMgPSB0aHJlc2hvbGQgLyAyIDwgcmFkaXVzO1xuXG4gICAgY29uc3QgcmFkaXVzRm9yUG9pbnQgPSBpc1Rvb0Nsb3NlRm9yUmFkaXVzID8gdGhyZXNob2xkIC8gMiA6IHJhZGl1cztcblxuICAgIGNvbnN0IGJlZm9yZSA9IG1vdmVUbyhwcmV2LCBwb2ludCwgcmFkaXVzRm9yUG9pbnQpO1xuICAgIGNvbnN0IGFmdGVyID0gbW92ZVRvKG5leHQsIHBvaW50LCByYWRpdXNGb3JQb2ludCk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgcGF0aCxcbiAgICAgIGBMICR7YmVmb3JlLnh9LCR7YmVmb3JlLnl9YCxcbiAgICAgIGBTICR7cG9pbnQueH0sJHtwb2ludC55fSAke2FmdGVyLnh9LCR7YWZ0ZXIueX1gLFxuICAgIF0uam9pbignXFxuJyk7XG4gIH0sIGBNICR7Zmlyc3RQb2ludC54fSwke2ZpcnN0UG9pbnQueX1gKTtcbn1cbiJdfQ==