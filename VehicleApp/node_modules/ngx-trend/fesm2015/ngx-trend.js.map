{"version":3,"file":"ngx-trend.js.map","sources":["ng://ngx-trend/helpers/math.helpers.ts","ng://ngx-trend/helpers/DOM.helpers.ts","ng://ngx-trend/helpers/misc.helpers.ts","ng://ngx-trend/trend/trend.helpers.ts","ng://ngx-trend/trend/trend.component.ts","ng://ngx-trend/trend/trend.module.ts"],"sourcesContent":["/* eslint-disable no-restricted-properties */\n\n/** normalize\n * This lets us translate a value from one scale to another.\n *\n * @param value - Our initial value to translate\n * @param min - the current minimum value possible\n * @param max - the current maximum value possible\n * @param scaleMin - the min value of the scale we're translating to\n * @param scaleMax - the max value of the scale we're translating to\n *\n * @returns the value on its new scale\n */\nexport function normalize(\n  value: number,\n  min: number,\n  max: number,\n  scaleMin = 0,\n  scaleMax = 1,\n) {\n  // If the `min` and `max` are the same value, it means our dataset is flat.\n  // For now, let's assume that flat data should be aligned to the bottom.\n  if (min === max) {\n    return scaleMin;\n  }\n\n  return scaleMin + (value - min) * (scaleMax - scaleMin) / (max - min);\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/** moveTo\n * the coordinate that lies at a midpoint between 2 lines, based on the radius\n *\n * @param to - Our initial point\n * @param to.x - The x value of our initial point\n * @param to.y - The y value of our initial point\n * @param from - Our final point\n * @param from.x - The x value of our final point\n * @param from.y - The y value of our final point\n * @param radius - The distance away from the final point\n *\n * @returns an object holding the x/y coordinates of the midpoint.\n */\nexport function moveTo(to: Point, from: Point, radius: number): Point {\n  const length = Math.sqrt((to.x - from.x) * (to.x - from.x) + (to.y - from.y) * (to.y - from.y));\n  const unitVector = { x: (to.x - from.x) / length, y: (to.y - from.y) / length };\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  };\n}\n\n/** getDistanceBetween\n * Simple formula derived from pythagoras to calculate the distance between\n * 2 points on a plane.\n *\n * @param p1 - Our initial point\n * @param p1.x - The x value of our initial point\n * @param p1.y - The y value of our initial point\n * @param p2 - Our final point\n * @param p2.x - The x value of our final point\n * @param p2.y - The y value of our final point\n *\n * @returns the distance between the points.\n */\nexport const getDistanceBetween = (p1: Point, p2: Point) =>\n  Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n\n/** checkForCollinearPoints\n * Figure out if the midpoint fits perfectly on a line between the two others.\n *\n * @param p1 - Our initial point\n * @param p1.x - The x value of our initial point\n * @param p1.y - The y value of our initial point\n * @param p2 - Our mid-point\n * @param p2.x - The x value of our mid-point\n * @param p2.y - The y value of our mid-point\n * @param p3 - Our final point\n * @param p3.x - The x value of our final point\n * @param p3.y - The y value of our final point\n\n * @returns whether or not p2 sits on the line between p1 and p3.\n */\nexport const checkForCollinearPoints = (p1: Point, p2: Point, p3: Point) =>\n  (p1.y - p2.y) * (p1.x - p3.x) === (p1.y - p3.y) * (p1.x - p2.x);\n","import {\n  checkForCollinearPoints,\n  getDistanceBetween,\n  moveTo,\n  Point,\n} from './math.helpers';\n\nexport const buildLinearPath = (data: Point[]) =>\n  data.reduce((path, point, index) => {\n    // The very first instruction needs to be a \"move\".\n    // The rest will be a \"line\".\n    const isFirstInstruction = index === 0;\n    const instruction = isFirstInstruction ? 'M' : 'L';\n\n    return `${path}${instruction} ${point.x},${point.y}\\n`;\n  }, '');\n\nexport function buildSmoothPath(data: Point[], radius: number) {\n  const [firstPoint, ...otherPoints] = data;\n\n  return otherPoints.reduce((path, point, index) => {\n    const next = otherPoints[index + 1];\n    const prev = otherPoints[index - 1] || firstPoint;\n\n    const isCollinear = next && checkForCollinearPoints(prev, point, next);\n\n    if (!next || isCollinear) {\n      // The very last line in the sequence can just be a regular line.\n      return `${path}\\nL ${point.x},${point.y}`;\n    }\n\n    const distanceFromPrev = getDistanceBetween(prev, point);\n    const distanceFromNext = getDistanceBetween(next, point);\n    const threshold = Math.min(distanceFromPrev, distanceFromNext);\n\n    const isTooCloseForRadius = threshold / 2 < radius;\n\n    const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;\n\n    const before = moveTo(prev, point, radiusForPoint);\n    const after = moveTo(next, point, radiusForPoint);\n\n    return [\n      path,\n      `L ${before.x},${before.y}`,\n      `S ${point.x},${point.y} ${after.x},${after.y}`,\n    ].join('\\n');\n  }, `M ${firstPoint.x},${firstPoint.y}`);\n}\n","export const generateId = () => Math.round(Math.random() * Math.pow(10, 16));\n","import { normalize } from '../helpers/math.helpers';\n\nexport function normalizeDataset(\n  data: number[],\n  minX: number,\n  maxX: number,\n  minY: number,\n  maxY: number,\n) {\n  // For the X axis, we want to normalize it based on its index in the array.\n  // For the Y axis, we want to normalize it based on the element's value.\n  //\n  // X axis is easy: just evenly-space each item in the array.\n  // For the Y axis, we first need to find the min and max of our array,\n  // and then normalize those values between 0 and 1.\n  const boundariesX = { min: 0, max: data.length - 1 };\n  const boundariesY = { min: Math.min(...data), max: Math.max(...data) };\n\n  const normalizedData = data.map((point, index) => ({\n    x: normalize(index, boundariesX.min, boundariesX.max, minX, maxX),\n    y: normalize(point, boundariesY.min, boundariesY.max, minY, maxY),\n  }));\n\n  // According to the SVG spec, paths with a height/width of `0` can't have\n  // linear gradients applied. This means that our lines are invisible when\n  // the dataset is flat (eg. [0, 0, 0, 0]).\n  //\n  // The hacky solution is to apply a very slight offset to the first point of\n  // the dataset. As ugly as it is, it's the best solution we can find (there\n  // are ways within the SVG spec of changing it, but not without causing\n  // breaking changes).\n  if (boundariesY.min === boundariesY.max) {\n    normalizedData[0].y += 0.0001;\n  }\n\n  return normalizedData;\n}\n","import {\n  animate,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  ViewChild,\n} from '@angular/core';\n\nimport { buildLinearPath, buildSmoothPath } from '../helpers/DOM.helpers';\nimport { normalize } from '../helpers/math.helpers';\nimport { generateId } from '../helpers/misc.helpers';\nimport { normalizeDataset } from './trend.helpers';\n\n\n@Component({\n  selector: 'ngx-trend',\n  template: `\n  <svg *ngIf=\"data && data.length >= 2\"\n    [attr.width]=\"svgWidth\"\n    [attr.height]=\"svgHeight\"\n    [attr.stroke]=\"stroke\"\n    [attr.stroke-width]=\"strokeWidth\"\n    [attr.stroke-linecap]=\"strokeLinecap\"\n    [attr.viewBox]=\"viewBox\"\n    [attr.preserveAspectRatio]=\"preserveAspectRatio\"\n  >\n    <defs *ngIf=\"gradient && gradient.length\">\n      <linearGradient [attr.id]=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop\n          *ngFor=\"let g of gradientTrimmed;\"\n          [attr.key]=\"g.idx\"\n          [attr.offset]=\"g.offset\"\n          [attr.stop-color]=\"g.stopColor\"\n        />\n      </linearGradient>\n    </defs>\n    <path fill=\"none\" #pathEl\n      [attr.stroke]=\"pathStroke\" [attr.d]=\"d\"\n      [@pathAnimaiton]=\"{\n        value: animationState,\n        params: {\n          autoDrawDuration: autoDrawDuration,\n          autoDrawEasing: autoDrawEasing,\n          lineLength: lineLength\n        }\n      }\" />\n  </svg>\n  `,\n  animations: [\n    trigger('pathAnimaiton', [\n      state('inactive', style({ display: 'none' })),\n      transition('* => active', [\n        style({ display: 'initial' }),\n        // We do the animation using the dash array/offset trick\n        // https://css-tricks.com/svg-line-animation-works/\n        animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}',\n          keyframes([\n            style({\n              'stroke-dasharray': '{{ lineLength }}px',\n              'stroke-dashoffset': '{{ lineLength }}px',\n            }),\n            style({\n              'stroke-dasharray': '{{ lineLength }}px',\n              'stroke-dashoffset': 0,\n            }),\n          ]),\n        ),\n        // One unfortunate side-effect of the auto-draw is that the line is\n        // actually 1 big dash, the same length as the line itself. If the\n        // line length changes (eg. radius change, new data), that dash won't\n        // be the same length anymore. We can fix that by removing those\n        // properties once the auto-draw is completed.\n        style({\n          'stroke-dashoffset': '',\n          'stroke-dasharray': '',\n        }),\n      ]),\n    ]),\n  ],\n})\nexport class TrendComponent implements OnChanges {\n  id: number;\n  @Input() data: (number | {value: number})[];\n  @Input() smooth: boolean;\n  @Input() autoDraw = false;\n  @Input() autoDrawDuration = 2000;\n  @Input() autoDrawEasing = 'ease';\n  @Input() width: number;\n  @Input() height: number;\n  @Input() padding = 8;\n  @Input() radius = 10;\n  @Input() stroke = 'black';\n  @Input() strokeLinecap = '';\n  @Input() strokeWidth = 1;\n  @Input() gradient: string[] = [];\n  @Input() preserveAspectRatio: string;\n  @ViewChild('pathEl') pathEl: ElementRef;\n  gradientTrimmed: any[];\n  d: any;\n  svgWidth: string | number = '100%';\n  svgHeight: string | number = '25%';\n  viewBox: string;\n  pathStroke: any;\n  gradientId: string;\n  lineLength: number;\n  animationState = '';\n\n  constructor() {\n    this.id = generateId();\n    this.gradientId = `ngx-trend-vertical-gradient-${this.id}`;\n  }\n  ngOnChanges() {\n    // We need at least 2 points to draw a graph.\n    if (!this.data || this.data.length < 2) {\n      return;\n    }\n\n    // `data` can either be an array of numbers:\n    // [1, 2, 3]\n    // or, an array of objects containing a value:\n    // [{ value: 1 }, { value: 2 }, { value: 3 }]\n    //\n    // For now, we're just going to convert the second form to the first.\n    // Later on, if/when we support tooltips, we may adjust.\n    const plainValues = this.data.map((point) => {\n      if (typeof point === 'number') {\n        return point;\n      }\n      return point.value;\n    });\n\n    // Our viewbox needs to be in absolute units, so we'll default to 300x75\n    // Our SVG can be a %, though; this is what makes it scalable.\n    // By defaulting to percentages, the SVG will grow to fill its parent\n    // container, preserving a 1/4 aspect ratio.\n    const viewBoxWidth = this.width || 300;\n    const viewBoxHeight = this.height || 75;\n    this.svgWidth = this.width || '100%';\n    this.svgHeight = this.height || '25%';\n    this.viewBox = `0 0 ${viewBoxWidth} ${viewBoxHeight}`;\n    const root = location.href.split(location.hash || '#')[0];\n    this.pathStroke = (this.gradient && this.gradient.length) ? `url('${root}#${this.gradientId}')` : undefined;\n\n    this.gradientTrimmed = this.gradient.slice().reverse().map((val, idx) => {\n      return {\n        idx,\n        stopColor: val,\n        offset: normalize(idx, 0, this.gradient.length - 1 || 1),\n      };\n    });\n\n    const normalizedValues = normalizeDataset(plainValues,\n      this.padding,\n      viewBoxWidth - this.padding,\n      // NOTE: Because SVGs are indexed from the top left, but most data is\n      // indexed from the bottom left, we're inverting the Y min/max.\n      viewBoxHeight - this.padding,\n      this.padding,\n    );\n\n    if (this.autoDraw && this.animationState !== 'active') {\n      this.animationState = 'inactive';\n      setTimeout(() => {\n        this.lineLength = this.pathEl.nativeElement.getTotalLength();\n        this.animationState = 'active';\n      });\n    }\n\n    this.d = this.smooth\n      ? buildSmoothPath(normalizedValues, this.radius)\n      : buildLinearPath(normalizedValues);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { TrendComponent } from './trend.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [TrendComponent],\n  declarations: [TrendComponent],\n})\nexport class TrendModule {\n}\n"],"names":[],"mappings":"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"}
