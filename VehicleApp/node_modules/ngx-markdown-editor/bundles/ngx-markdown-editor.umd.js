(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-markdown-editor', ['exports', '@angular/core', '@angular/forms', '@angular/platform-browser', '@angular/common'], factory) :
    (factory((global['ngx-markdown-editor'] = {}),global.ng.core,global.ng.forms,global.ng.platformBrowser,global.ng.common));
}(this, (function (exports,core,forms,platformBrowser,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MarkdownEditorComponent = /** @class */ (function () {
        function MarkdownEditorComponent(required, maxlength, _renderer, _domSanitizer) {
            if (required === void 0) {
                required = false;
            }
            if (maxlength === void 0) {
                maxlength = -1;
            }
            this.required = required;
            this.maxlength = maxlength;
            this._renderer = _renderer;
            this._domSanitizer = _domSanitizer;
            this.hideToolbar = false;
            this.height = "300px";
            this._options = {};
            this.hideIcons = {};
            this.showPreviewPanel = true;
            this.isFullScreen = false;
            this.dragover = false;
            this.isUploading = false;
            this._defaultOption = {
                showBorder: true,
                hideIcons: [],
                scrollPastEnd: 0,
                enablePreviewContentClick: false
            };
            this._onChange = function (_) { };
            this._onTouched = function () { };
        }
        Object.defineProperty(MarkdownEditorComponent.prototype, "mode", {
            get: /**
             * @return {?}
             */ function () {
                return this._mode || 'editor';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!value || (value.toLowerCase() !== 'editor' && value.toLowerCase() !== 'preview')) {
                    value = 'editor';
                }
                this._mode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "options", {
            get: /**
             * @return {?}
             */ function () {
                return this._options || {};
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._options = Object.assign(this._defaultOption, {}, value);
                this.hideIcons = {};
                if (this._options.hideIcons) {
                    this._options.hideIcons.forEach(function (v) { return _this.hideIcons[v] = true; });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "markdownValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._markdownValue || '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                this._markdownValue = value;
                this._onChange(value);
                if (this.preRender && this.preRender instanceof Function) {
                    value = this.preRender(value);
                }
                if (value !== null && value !== undefined) {
                    if (this._renderMarkTimeout)
                        clearTimeout(this._renderMarkTimeout);
                    this._renderMarkTimeout = setTimeout(function () {
                        /** @type {?} */
                        var html = marked(value || '', _this._markedOpt);
                        _this.previewHtml = _this._domSanitizer.bypassSecurityTrustHtml(html);
                    }, 100);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownEditorComponent.prototype, "_hasUploadFunction", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                return this.upload && this.upload instanceof Function;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var markedRender = new marked.Renderer();
                markedRender.code = function (code, language) {
                    /** @type {?} */
                    var validLang = !!(language && hljs.getLanguage(language));
                    /** @type {?} */
                    var highlighted = validLang ? hljs.highlight(language, code).value : code;
                    return "<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs " + language + "\">" + highlighted + "</code></pre>";
                };
                markedRender.table = function (header, body) {
                    return "<table class=\"table table-bordered\">\n<thead>\n" + header + "</thead>\n<tbody>\n" + body + "</tbody>\n</table>\n";
                };
                markedRender.listitem = function (text) {
                    if (/^\s*\[[x ]\]\s*/.test(text)) {
                        text = text
                            .replace(/^\s*\[ \]\s*/, '<i class="fa fa-square-o" style="margin: 0 0.2em 0.25em -1.6em;"></i> ')
                            .replace(/^\s*\[x\]\s*/, '<i class="fa fa-check-square" style="margin: 0 0.2em 0.25em -1.6em;"></i> ');
                        return "<li style=\"list-style: none;\">" + text + "</li>";
                    }
                    else {
                        return "<li>" + text + "</li>";
                    }
                };
                /** @type {?} */
                var markedjsOpt = {
                    renderer: markedRender,
                    highlight: function (code) { return hljs.highlightAuto(code).value; }
                };
                this._markedOpt = Object.assign({}, this.options.markedjsOpt, markedjsOpt);
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var editorElement = this.aceEditorContainer.nativeElement;
                this._editor = ace.edit(editorElement);
                this._editor.$blockScrolling = Infinity;
                this._editor.getSession().setUseWrapMode(true);
                this._editor.getSession().setMode("ace/mode/markdown");
                this._editor.setValue(this.markdownValue || '', 1);
                this._editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);
                this._editor.on("change", function (e) {
                    /** @type {?} */
                    var val = _this._editor.getValue();
                    _this.markdownValue = val;
                });
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._editor && this._editor.destroy();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MarkdownEditorComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                setTimeout(function () {
                    _this.markdownValue = value;
                    if (typeof value !== 'undefined' && _this._editor) {
                        _this._editor.setValue(value || '', 1);
                    }
                }, 1);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MarkdownEditorComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        MarkdownEditorComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} c
         * @return {?}
         */
        MarkdownEditorComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                /** @type {?} */
                var result = null;
                if (this.required && this.markdownValue.length === 0) {
                    result = { required: true };
                }
                if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {
                    result = { maxlength: true };
                }
                return result;
            };
        /**
         * @param {?} type
         * @param {?=} customContent
         * @return {?}
         */
        MarkdownEditorComponent.prototype.insertContent = /**
         * @param {?} type
         * @param {?=} customContent
         * @return {?}
         */
            function (type, customContent) {
                if (!this._editor)
                    return;
                /** @type {?} */
                var selectedText = this._editor.getSelectedText();
                /** @type {?} */
                var isSelected = !!selectedText;
                /** @type {?} */
                var startSize = 2;
                /** @type {?} */
                var initText = '';
                /** @type {?} */
                var range = this._editor.selection.getRange();
                switch (type) {
                    case 'Bold':
                        initText = 'Bold Text';
                        selectedText = "**" + (selectedText || initText) + "**";
                        break;
                    case 'Italic':
                        initText = 'Italic Text';
                        selectedText = "*" + (selectedText || initText) + "*";
                        startSize = 1;
                        break;
                    case 'Heading':
                        initText = 'Heading';
                        selectedText = "# " + (selectedText || initText);
                        break;
                    case 'Refrence':
                        initText = 'Refrence';
                        selectedText = "> " + (selectedText || initText);
                        break;
                    case 'Link':
                        selectedText = "[](http://)";
                        startSize = 1;
                        break;
                    case 'Image':
                        selectedText = "![](http://)";
                        break;
                    case 'Ul':
                        selectedText = "- " + (selectedText || initText);
                        break;
                    case 'Ol':
                        selectedText = "1. " + (selectedText || initText);
                        startSize = 3;
                        break;
                    case 'Code':
                        initText = 'Source Code';
                        selectedText = "```language\r\n" + (selectedText || initText) + "\r\n```";
                        startSize = 3;
                        break;
                    case 'Custom':
                        selectedText = customContent;
                        startSize = 0;
                        break;
                }
                this._editor.session.replace(range, selectedText);
                if (!isSelected) {
                    range.start.column += startSize;
                    range.end.column = range.start.column + initText.length;
                    this._editor.selection.setRange(range);
                }
                this._editor.focus();
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.togglePreview = /**
         * @return {?}
         */
            function () {
                this.showPreviewPanel = !this.showPreviewPanel;
                this.editorResize();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MarkdownEditorComponent.prototype.previewPanelClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.options.enablePreviewContentClick !== true) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            };
        /**
         * @return {?}
         */
        MarkdownEditorComponent.prototype.fullScreen = /**
         * @return {?}
         */
            function () {
                this.isFullScreen = !this.isFullScreen;
                this._renderer.setElementStyle(document.body, 'overflowY', this.isFullScreen ? 'hidden' : 'auto');
                this.editorResize();
            };
        /**
         * @param {?=} timeOut
         * @return {?}
         */
        MarkdownEditorComponent.prototype.editorResize = /**
         * @param {?=} timeOut
         * @return {?}
         */
            function (timeOut) {
                var _this = this;
                if (timeOut === void 0) {
                    timeOut = 100;
                }
                if (this._editor) {
                    setTimeout(function () {
                        _this._editor.resize();
                        _this._editor.focus();
                    }, timeOut);
                }
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        MarkdownEditorComponent.prototype.onDragover = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                evt.stopImmediatePropagation();
                evt.preventDefault();
                if (!this._hasUploadFunction)
                    return;
                this.dragover = true;
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        MarkdownEditorComponent.prototype.onDrop = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                var _this = this;
                evt.stopImmediatePropagation();
                evt.preventDefault();
                if (!this._hasUploadFunction || this.isUploading)
                    return;
                if (!evt.dataTransfer.files || evt.dataTransfer.files.length === 0) {
                    this.dragover = false;
                    return;
                }
                this.isUploading = true;
                Promise.resolve()
                    .then(function () {
                    return _this.upload(evt.dataTransfer.files);
                })
                    .then(function (data) {
                    var e_1, _a;
                    if (Array.isArray(data)) {
                        /** @type {?} */
                        var msg = [];
                        try {
                            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                                var item = data_1_1.value;
                                /** @type {?} */
                                var tempMsg = "[" + item.name + "](" + item.url + ")";
                                if (item.isImg) {
                                    tempMsg = "!" + tempMsg;
                                }
                                msg.push(tempMsg);
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                                    _a.call(data_1);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                        _this.insertContent('Custom', msg.join('\r\n'));
                    }
                    else {
                        console.warn('Invalid upload result. Please using follow this type `UploadResult`.');
                    }
                    _this.isUploading = false;
                    _this.dragover = false;
                })
                    .catch(function (err) {
                    console.error(err);
                    _this.isUploading = false;
                    _this.dragover = false;
                });
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        MarkdownEditorComponent.prototype.onDragleave = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                evt.stopImmediatePropagation();
                evt.preventDefault();
                if (!this._hasUploadFunction)
                    return;
                this.dragover = false;
            };
        MarkdownEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'md-editor',
                        template: "<div class=\"md-editor-container\" [class.fullscreen]=\"isFullScreen\">\r\n  <div class=\"tool-bar\" *ngIf=\"!hideToolbar && mode != 'preview'\">\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Bold\" (click)=\"insertContent('Bold')\" *ngIf=\"!hideIcons.Bold\">\r\n        <i class=\"fa fa-bold\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Italic\" (click)=\"insertContent('Italic')\" *ngIf=\"!hideIcons.Italic\">\r\n        <i class=\"fa fa-italic\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Heading\" (click)=\"insertContent('Heading')\" *ngIf=\"!hideIcons.Heading\">\r\n        <i class=\"fa fa-header\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Refrence\" (click)=\"insertContent('Refrence')\" *ngIf=\"!hideIcons.Refrence\">\r\n        <i class=\"fa fa-quote-left\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Link\" (click)=\"insertContent('Link')\" *ngIf=\"!hideIcons.Link\">\r\n        <i class=\"fa fa-link\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Image\" (click)=\"insertContent('Image')\" *ngIf=\"!hideIcons.Image\">\r\n        <i class=\"fa fa-image\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Unordered List\" (click)=\"insertContent('Ul')\" *ngIf=\"!hideIcons.Ul\">\r\n        <i class=\"fa fa-list-ul\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Ordered List\" (click)=\"insertContent('Ol')\" *ngIf=\"!hideIcons.Ol\">\r\n        <i class=\"fa fa-list-ol\"></i>\r\n      </button>\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" title=\"Code Block\" (click)=\"insertContent('Code')\" *ngIf=\"!hideIcons.Code\">\r\n        <i class=\"fa fa-file-code-o\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" [attr.title]=\"showPreviewPanel ? 'Hide Preview' : 'Show Preview'\"\r\n        (click)=\"togglePreview()\" *ngIf=\"!hideIcons.TogglePreview\">\r\n        <i class=\"fa\" [class.fa-eye]=\"!showPreviewPanel\" [class.fa-eye-slash]=\"showPreviewPanel\"></i>\r\n      </button>\r\n    </div>\r\n    <div class=\"btn-group pull-right hide-split\">\r\n      <button class=\"btn btn-sm btn-default\" type=\"button\" [class.active]=\"isFullScreen\" (click)=\"fullScreen()\" *ngIf=\"!hideIcons.FullScreen\">\r\n        <i class=\"fa fa-arrows-alt\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"editor-container\">\r\n    <div [class.dragover]=\"dragover\" [style.display]=\"mode == 'preview' ? 'none' : null\" (dragover)=\"onDragover($event)\">\r\n      <div class=\"drag-container\">\r\n        <div class=\"upload-loading\">\r\n          <i class=\"fa fa-upload\" *ngIf=\"!isUploading\"></i>\r\n          <i class=\"fa fa-spinner fa-pulse fa-fw\" *ngIf=\"isUploading\"></i>\r\n          <div class=\"text\">{{ isUploading ? 'Uploading' : 'Drag it here' }}</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"drag-container drag-container-mask\" (drop)=\"onDrop($event)\" (dragleave)=\"onDragleave($event)\"></div>\r\n      <div class=\"editor-panel\" [style.height]=\"height\">\r\n        <div class=\"ace-editor\" #aceEditor></div>\r\n      </div>\r\n    </div>\r\n    <div [style.display]=\"showPreviewPanel ? 'block' : 'none'\" (click)=\"previewPanelClick($event)\">\r\n      <div class=\"preview-panel\" [innerHtml]=\"previewHtml\" [style.height]=\"height\"></div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"maxlength > 0 && mode != 'preview'\">\r\n    <div class=\"text-right md-footer\">\r\n      {{ markdownValue?.length }} / {{ maxlength }}\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return MarkdownEditorComponent; }),
                                multi: true
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef(function () { return MarkdownEditorComponent; }),
                                multi: true
                            }
                        ],
                        styles: [".md-editor-container{margin-bottom:15px;border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%;height:100%;z-index:99999999}.md-editor-container.fullscreen .editor-panel,.md-editor-container.fullscreen .preview-panel{height:calc(100vh - 40px)!important}.md-editor-container .ace-editor{height:100%}.md-editor-container .tool-bar{background-color:#f5f5f5;border-bottom:1px solid rgba(0,0,0,.1)}.md-editor-container .tool-bar .btn-group{padding:6px}.md-editor-container .tool-bar .btn-group>.btn:first-child::before{content:' ';background-color:#a9a9a9;width:1px;height:24px;left:-9px;top:2px;position:absolute}.md-editor-container .tool-bar .btn-group.hide-split>.btn:first-child::before,.md-editor-container .tool-bar .btn-group:first-child>.btn:first-child::before{display:none}.md-editor-container .tool-bar .btn{margin-bottom:0}.md-editor-container .editor-container{display:flex}.md-editor-container .editor-container>div .drag-container{display:none}.md-editor-container .editor-container>div.dragover{position:relative}.md-editor-container .editor-container>div.dragover .drag-container{display:block;position:absolute;left:0;top:0;right:0;bottom:0;z-index:10;background-color:rgba(0,0,0,.4);display:flex;align-items:center;justify-content:center;font-size:50px;color:#fff}.md-editor-container .editor-container>div.dragover .drag-container.drag-container-mask{background-color:transparent;z-index:11}.md-editor-container .editor-container>div.dragover .drag-container .upload-loading{display:flex;flex-direction:column;align-items:center}.md-editor-container .editor-container>div.dragover .drag-container .upload-loading .text{font-size:20px;margin-top:10px}.md-editor-container .editor-container>div{flex:1}.md-editor-container .preview-panel{border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px;overflow-y:auto}.md-editor-container .md-footer{padding:2px;background-color:#f0f0f0;font-size:12px;border-top:1px solid rgba(0,0,0,.1)}"]
                    }] }
        ];
        /** @nocollapse */
        MarkdownEditorComponent.ctorParameters = function () {
            return [
                { type: Boolean, decorators: [{ type: core.Attribute, args: ['required',] }] },
                { type: Number, decorators: [{ type: core.Attribute, args: ['maxlength',] }] },
                { type: core.Renderer },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        MarkdownEditorComponent.propDecorators = {
            aceEditorContainer: [{ type: core.ViewChild, args: ['aceEditor',] }],
            hideToolbar: [{ type: core.Input }],
            height: [{ type: core.Input }],
            preRender: [{ type: core.Input }],
            upload: [{ type: core.Input }],
            mode: [{ type: core.Input }],
            options: [{ type: core.Input }]
        };
        return MarkdownEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LMarkdownEditorModule = /** @class */ (function () {
        function LMarkdownEditorModule() {
        }
        LMarkdownEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            MarkdownEditorComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        exports: [
                            MarkdownEditorComponent
                        ]
                    },] }
        ];
        return LMarkdownEditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MarkdownEditorComponent = MarkdownEditorComponent;
    exports.LMarkdownEditorModule = LMarkdownEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hcmtkb3duLWVkaXRvci51bWQuanMubWFwIiwic291cmNlcyI6WyJub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwibmc6Ly9uZ3gtbWFya2Rvd24tZWRpdG9yL2xpYi9tZC1lZGl0b3IuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtbWFya2Rvd24tZWRpdG9yL3B1YmxpY19hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgZm9yd2FyZFJlZiwgUmVuZGVyZXIsIEF0dHJpYnV0ZSwgSW5wdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE1kRWRpdG9yT3B0aW9uIH0gZnJvbSAnLi9tZC1lZGl0b3IudHlwZXMnO1xyXG5cclxuZGVjbGFyZSBsZXQgYWNlOiBhbnk7XHJcbmRlY2xhcmUgbGV0IG1hcmtlZDogYW55O1xyXG5kZWNsYXJlIGxldCBobGpzOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ21kLWVkaXRvcicsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbWQtZWRpdG9yLmNzcyddLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9tZC1lZGl0b3IuaHRtbCcsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXJrZG93bkVkaXRvckNvbXBvbmVudCksXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXJrZG93bkVkaXRvckNvbXBvbmVudCksXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9XHJcbiAgXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcmtkb3duRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2FjZUVkaXRvcicpIHB1YmxpYyBhY2VFZGl0b3JDb250YWluZXI6IEVsZW1lbnRSZWY7XHJcbiAgQElucHV0KCkgcHVibGljIGhpZGVUb29sYmFyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgQElucHV0KCkgcHVibGljIGhlaWdodDogc3RyaW5nID0gXCIzMDBweFwiO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBwcmVSZW5kZXI6IEZ1bmN0aW9uO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyB1cGxvYWQ6IEZ1bmN0aW9uO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBnZXQgbW9kZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUgfHwgJ2VkaXRvcic7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgbW9kZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXZhbHVlIHx8ICh2YWx1ZS50b0xvd2VyQ2FzZSgpICE9PSAnZWRpdG9yJyAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpICE9PSAncHJldmlldycpKSB7XHJcbiAgICAgIHZhbHVlID0gJ2VkaXRvcic7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9tb2RlID0gdmFsdWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgX21vZGU6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZ2V0IG9wdGlvbnMoKTogTWRFZGl0b3JPcHRpb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnMgfHwge307XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgb3B0aW9ucyh2YWx1ZTogTWRFZGl0b3JPcHRpb24pIHtcclxuICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuX2RlZmF1bHRPcHRpb24sIHt9LCB2YWx1ZSk7XHJcbiAgICB0aGlzLmhpZGVJY29ucyA9IHt9O1xyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuaGlkZUljb25zKSB7XHJcbiAgICAgIHRoaXMuX29wdGlvbnMuaGlkZUljb25zLmZvckVhY2goKHY6IGFueSkgPT4gdGhpcy5oaWRlSWNvbnNbdl0gPSB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBfb3B0aW9uczogYW55ID0ge307XHJcblxyXG4gIHB1YmxpYyBoaWRlSWNvbnM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBzaG93UHJldmlld1BhbmVsOiBib29sZWFuID0gdHJ1ZTtcclxuICBwdWJsaWMgaXNGdWxsU2NyZWVuOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHVibGljIHByZXZpZXdIdG1sOiBhbnk7XHJcbiAgcHVibGljIGRyYWdvdmVyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHVibGljIGlzVXBsb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBnZXQgbWFya2Rvd25WYWx1ZSgpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21hcmtkb3duVmFsdWUgfHwgJyc7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgbWFya2Rvd25WYWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLl9tYXJrZG93blZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLl9vbkNoYW5nZSh2YWx1ZSk7XHJcblxyXG4gICAgaWYgKHRoaXMucHJlUmVuZGVyICYmIHRoaXMucHJlUmVuZGVyIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgdmFsdWUgPSB0aGlzLnByZVJlbmRlcih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAodGhpcy5fcmVuZGVyTWFya1RpbWVvdXQpIGNsZWFyVGltZW91dCh0aGlzLl9yZW5kZXJNYXJrVGltZW91dCk7XHJcbiAgICAgIHRoaXMuX3JlbmRlck1hcmtUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbGV0IGh0bWwgPSBtYXJrZWQodmFsdWUgfHwgJycsIHRoaXMuX21hcmtlZE9wdCk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3SHRtbCA9IHRoaXMuX2RvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKTtcclxuICAgICAgfSwgMTAwKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBfbWFya2Rvd25WYWx1ZTogYW55O1xyXG5cclxuICBwcml2YXRlIF9lZGl0b3I6IGFueTtcclxuICBwcml2YXRlIF9yZW5kZXJNYXJrVGltZW91dDogYW55O1xyXG4gIHByaXZhdGUgX21hcmtlZE9wdDogYW55O1xyXG4gIHByaXZhdGUgX2RlZmF1bHRPcHRpb246IE1kRWRpdG9yT3B0aW9uID0ge1xyXG4gICAgc2hvd0JvcmRlcjogdHJ1ZSxcclxuICAgIGhpZGVJY29uczogW10sXHJcbiAgICBzY3JvbGxQYXN0RW5kOiAwLFxyXG4gICAgZW5hYmxlUHJldmlld0NvbnRlbnRDbGljazogZmFsc2VcclxuICB9O1xyXG4gIHByaXZhdGUgZ2V0IF9oYXNVcGxvYWRGdW5jdGlvbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnVwbG9hZCAmJiB0aGlzLnVwbG9hZCBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfb25DaGFuZ2UgPSAoXzogYW55KSA9PiB7IH07XHJcbiAgcHJpdmF0ZSBfb25Ub3VjaGVkID0gKCkgPT4geyB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgcHVibGljIHJlcXVpcmVkOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICBAQXR0cmlidXRlKCdtYXhsZW5ndGgnKSBwdWJsaWMgbWF4bGVuZ3RoOiBudW1iZXIgPSAtMSxcclxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcixcclxuICAgIHByaXZhdGUgX2RvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBsZXQgbWFya2VkUmVuZGVyID0gbmV3IG1hcmtlZC5SZW5kZXJlcigpO1xyXG4gICAgbWFya2VkUmVuZGVyLmNvZGUgPSAoY29kZTogYW55LCBsYW5ndWFnZTogYW55KSA9PiB7XHJcbiAgICAgIGxldCB2YWxpZExhbmcgPSAhIShsYW5ndWFnZSAmJiBobGpzLmdldExhbmd1YWdlKGxhbmd1YWdlKSk7XHJcbiAgICAgIGxldCBoaWdobGlnaHRlZCA9IHZhbGlkTGFuZyA/IGhsanMuaGlnaGxpZ2h0KGxhbmd1YWdlLCBjb2RlKS52YWx1ZSA6IGNvZGU7XHJcbiAgICAgIHJldHVybiBgPHByZSBzdHlsZT1cInBhZGRpbmc6IDA7IGJvcmRlci1yYWRpdXM6IDA7XCI+PGNvZGUgY2xhc3M9XCJobGpzICR7bGFuZ3VhZ2V9XCI+JHtoaWdobGlnaHRlZH08L2NvZGU+PC9wcmU+YDtcclxuICAgIH07XHJcbiAgICBtYXJrZWRSZW5kZXIudGFibGUgPSAoaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gYDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkXCI+XFxuPHRoZWFkPlxcbiR7aGVhZGVyfTwvdGhlYWQ+XFxuPHRib2R5PlxcbiR7Ym9keX08L3Rib2R5PlxcbjwvdGFibGU+XFxuYDtcclxuICAgIH07XHJcbiAgICBtYXJrZWRSZW5kZXIubGlzdGl0ZW0gPSAodGV4dDogYW55KSA9PiB7XHJcbiAgICAgIGlmICgvXlxccypcXFtbeCBdXFxdXFxzKi8udGVzdCh0ZXh0KSkge1xyXG4gICAgICAgIHRleHQgPSB0ZXh0XHJcbiAgICAgICAgICAucmVwbGFjZSgvXlxccypcXFsgXFxdXFxzKi8sICc8aSBjbGFzcz1cImZhIGZhLXNxdWFyZS1vXCIgc3R5bGU9XCJtYXJnaW46IDAgMC4yZW0gMC4yNWVtIC0xLjZlbTtcIj48L2k+ICcpXHJcbiAgICAgICAgICAucmVwbGFjZSgvXlxccypcXFt4XFxdXFxzKi8sICc8aSBjbGFzcz1cImZhIGZhLWNoZWNrLXNxdWFyZVwiIHN0eWxlPVwibWFyZ2luOiAwIDAuMmVtIDAuMjVlbSAtMS42ZW07XCI+PC9pPiAnKTtcclxuICAgICAgICByZXR1cm4gYDxsaSBzdHlsZT1cImxpc3Qtc3R5bGU6IG5vbmU7XCI+JHt0ZXh0fTwvbGk+YDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYDxsaT4ke3RleHR9PC9saT5gO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgbGV0IG1hcmtlZGpzT3B0ID0ge1xyXG4gICAgICByZW5kZXJlcjogbWFya2VkUmVuZGVyLFxyXG4gICAgICBoaWdobGlnaHQ6IChjb2RlOiBhbnkpID0+IGhsanMuaGlnaGxpZ2h0QXV0byhjb2RlKS52YWx1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMuX21hcmtlZE9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucy5tYXJrZWRqc09wdCwgbWFya2VkanNPcHQpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgbGV0IGVkaXRvckVsZW1lbnQgPSB0aGlzLmFjZUVkaXRvckNvbnRhaW5lci5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5fZWRpdG9yID0gYWNlLmVkaXQoZWRpdG9yRWxlbWVudCk7XHJcbiAgICB0aGlzLl9lZGl0b3IuJGJsb2NrU2Nyb2xsaW5nID0gSW5maW5pdHk7XHJcbiAgICB0aGlzLl9lZGl0b3IuZ2V0U2Vzc2lvbigpLnNldFVzZVdyYXBNb2RlKHRydWUpO1xyXG4gICAgdGhpcy5fZWRpdG9yLmdldFNlc3Npb24oKS5zZXRNb2RlKFwiYWNlL21vZGUvbWFya2Rvd25cIik7XHJcbiAgICB0aGlzLl9lZGl0b3Iuc2V0VmFsdWUodGhpcy5tYXJrZG93blZhbHVlIHx8ICcnLCAxKTtcclxuICAgIHRoaXMuX2VkaXRvci5zZXRPcHRpb24oJ3Njcm9sbFBhc3RFbmQnLCB0aGlzLl9vcHRpb25zLnNjcm9sbFBhc3RFbmQgfHwgMCk7XHJcblxyXG4gICAgdGhpcy5fZWRpdG9yLm9uKFwiY2hhbmdlXCIsIChlOiBhbnkpID0+IHtcclxuICAgICAgbGV0IHZhbCA9IHRoaXMuX2VkaXRvci5nZXRWYWx1ZSgpO1xyXG4gICAgICB0aGlzLm1hcmtkb3duVmFsdWUgPSB2YWw7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fZWRpdG9yICYmIHRoaXMuX2VkaXRvci5kZXN0cm95KCk7XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkgfCBBcnJheTxhbnk+KTogdm9pZCB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5tYXJrZG93blZhbHVlID0gdmFsdWU7XHJcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuX2VkaXRvcikge1xyXG4gICAgICAgIHRoaXMuX2VkaXRvci5zZXRWYWx1ZSh2YWx1ZSB8fCAnJywgMSk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEpO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4ge30pOiB2b2lkIHtcclxuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkIHtcclxuICAgIHRoaXMuX29uVG91Y2hlZCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB7XHJcbiAgICBsZXQgcmVzdWx0OiBhbnkgPSBudWxsO1xyXG4gICAgaWYgKHRoaXMucmVxdWlyZWQgJiYgdGhpcy5tYXJrZG93blZhbHVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXN1bHQgPSB7IHJlcXVpcmVkOiB0cnVlIH07XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tYXhsZW5ndGggPiAwICYmIHRoaXMubWFya2Rvd25WYWx1ZS5sZW5ndGggPiB0aGlzLm1heGxlbmd0aCkge1xyXG4gICAgICByZXN1bHQgPSB7IG1heGxlbmd0aDogdHJ1ZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGluc2VydENvbnRlbnQodHlwZTogc3RyaW5nLCBjdXN0b21Db250ZW50Pzogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXRoaXMuX2VkaXRvcikgcmV0dXJuO1xyXG4gICAgbGV0IHNlbGVjdGVkVGV4dCA9IHRoaXMuX2VkaXRvci5nZXRTZWxlY3RlZFRleHQoKTtcclxuICAgIGxldCBpc1NlbGVjdGVkID0gISFzZWxlY3RlZFRleHQ7XHJcbiAgICBsZXQgc3RhcnRTaXplID0gMjtcclxuICAgIGxldCBpbml0VGV4dDogc3RyaW5nID0gJyc7XHJcbiAgICBsZXQgcmFuZ2UgPSB0aGlzLl9lZGl0b3Iuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSAnQm9sZCc6XHJcbiAgICAgICAgaW5pdFRleHQgPSAnQm9sZCBUZXh0JztcclxuICAgICAgICBzZWxlY3RlZFRleHQgPSBgKioke3NlbGVjdGVkVGV4dCB8fCBpbml0VGV4dH0qKmA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ0l0YWxpYyc6XHJcbiAgICAgICAgaW5pdFRleHQgPSAnSXRhbGljIFRleHQnO1xyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGAqJHtzZWxlY3RlZFRleHQgfHwgaW5pdFRleHR9KmA7XHJcbiAgICAgICAgc3RhcnRTaXplID0gMTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnSGVhZGluZyc6XHJcbiAgICAgICAgaW5pdFRleHQgPSAnSGVhZGluZyc7XHJcbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gYCMgJHtzZWxlY3RlZFRleHQgfHwgaW5pdFRleHR9YDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnUmVmcmVuY2UnOlxyXG4gICAgICAgIGluaXRUZXh0ID0gJ1JlZnJlbmNlJztcclxuICAgICAgICBzZWxlY3RlZFRleHQgPSBgPiAke3NlbGVjdGVkVGV4dCB8fCBpbml0VGV4dH1gO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdMaW5rJzpcclxuICAgICAgICBzZWxlY3RlZFRleHQgPSBgW10oaHR0cDovLylgO1xyXG4gICAgICAgIHN0YXJ0U2l6ZSA9IDE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ0ltYWdlJzpcclxuICAgICAgICBzZWxlY3RlZFRleHQgPSBgIVtdKGh0dHA6Ly8pYDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnVWwnOlxyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGAtICR7c2VsZWN0ZWRUZXh0IHx8IGluaXRUZXh0fWBcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnT2wnOlxyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGAxLiAke3NlbGVjdGVkVGV4dCB8fCBpbml0VGV4dH1gXHJcbiAgICAgICAgc3RhcnRTaXplID0gMztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnQ29kZSc6XHJcbiAgICAgICAgaW5pdFRleHQgPSAnU291cmNlIENvZGUnO1xyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IFwiYGBgbGFuZ3VhZ2VcXHJcXG5cIiArIChzZWxlY3RlZFRleHQgfHwgaW5pdFRleHQpICsgXCJcXHJcXG5gYGBcIjtcclxuICAgICAgICBzdGFydFNpemUgPSAzO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdDdXN0b20nOlxyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGN1c3RvbUNvbnRlbnQ7XHJcbiAgICAgICAgc3RhcnRTaXplID0gMDtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRoaXMuX2VkaXRvci5zZXNzaW9uLnJlcGxhY2UocmFuZ2UsIHNlbGVjdGVkVGV4dCk7XHJcbiAgICBpZiAoIWlzU2VsZWN0ZWQpIHtcclxuICAgICAgcmFuZ2Uuc3RhcnQuY29sdW1uICs9IHN0YXJ0U2l6ZTtcclxuICAgICAgcmFuZ2UuZW5kLmNvbHVtbiA9IHJhbmdlLnN0YXJ0LmNvbHVtbiArIGluaXRUZXh0Lmxlbmd0aDtcclxuICAgICAgdGhpcy5fZWRpdG9yLnNlbGVjdGlvbi5zZXRSYW5nZShyYW5nZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9lZGl0b3IuZm9jdXMoKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZVByZXZpZXcoKSB7XHJcbiAgICB0aGlzLnNob3dQcmV2aWV3UGFuZWwgPSAhdGhpcy5zaG93UHJldmlld1BhbmVsO1xyXG4gICAgdGhpcy5lZGl0b3JSZXNpemUoKTtcclxuICB9XHJcblxyXG4gIHByZXZpZXdQYW5lbENsaWNrKGV2ZW50OiBFdmVudCkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVQcmV2aWV3Q29udGVudENsaWNrICE9PSB0cnVlKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVsbFNjcmVlbigpIHtcclxuICAgIHRoaXMuaXNGdWxsU2NyZWVuID0gIXRoaXMuaXNGdWxsU2NyZWVuO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRvY3VtZW50LmJvZHksICdvdmVyZmxvd1knLCB0aGlzLmlzRnVsbFNjcmVlbiA/ICdoaWRkZW4nIDogJ2F1dG8nKTtcclxuICAgIHRoaXMuZWRpdG9yUmVzaXplKCk7XHJcbiAgfVxyXG5cclxuICBlZGl0b3JSZXNpemUodGltZU91dDogbnVtYmVyID0gMTAwKSB7XHJcbiAgICBpZiAodGhpcy5fZWRpdG9yKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2VkaXRvci5yZXNpemUoKTtcclxuICAgICAgICB0aGlzLl9lZGl0b3IuZm9jdXMoKTtcclxuICAgICAgfSwgdGltZU91dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkRyYWdvdmVyKGV2dDogRHJhZ0V2ZW50KSB7XHJcbiAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICghdGhpcy5faGFzVXBsb2FkRnVuY3Rpb24pIHJldHVybjtcclxuICAgIHRoaXMuZHJhZ292ZXIgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgb25Ecm9wKGV2dDogRHJhZ0V2ZW50KSB7XHJcbiAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICghdGhpcy5faGFzVXBsb2FkRnVuY3Rpb24gfHwgdGhpcy5pc1VwbG9hZGluZykgcmV0dXJuO1xyXG5cclxuICAgIGlmICghZXZ0LmRhdGFUcmFuc2Zlci5maWxlcyB8fCBldnQuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmRyYWdvdmVyID0gZmFsc2U7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWQoZXZ0LmRhdGFUcmFuc2Zlci5maWxlcyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICBsZXQgbXNnID0gW107XHJcbiAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgbGV0IHRlbXBNc2cgPSBgWyR7aXRlbS5uYW1lfV0oJHtpdGVtLnVybH0pYDtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaXNJbWcpIHtcclxuICAgICAgICAgICAgICB0ZW1wTXNnID0gYCEke3RlbXBNc2d9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtc2cucHVzaCh0ZW1wTXNnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuaW5zZXJ0Q29udGVudCgnQ3VzdG9tJywgbXNnLmpvaW4oJ1xcclxcbicpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHVwbG9hZCByZXN1bHQuIFBsZWFzZSB1c2luZyBmb2xsb3cgdGhpcyB0eXBlIGBVcGxvYWRSZXN1bHRgLicpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRyYWdvdmVyID0gZmFsc2U7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB0aGlzLmlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kcmFnb3ZlciA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uRHJhZ2xlYXZlKGV2dDogRHJhZ0V2ZW50KSB7XHJcbiAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICghdGhpcy5faGFzVXBsb2FkRnVuY3Rpb24pIHJldHVybjtcclxuICAgIHRoaXMuZHJhZ292ZXIgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBNYXJrZG93bkVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vbGliL21kLWVkaXRvci5jb21wb25lbnQnO1xyXG5cclxuZXhwb3J0IHsgTWFya2Rvd25FZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2xpYi9tZC1lZGl0b3IuY29tcG9uZW50JztcclxuZXhwb3J0IHsgTWRFZGl0b3JPcHRpb24sIFVwbG9hZFJlc3VsdCwgTWFya2VkanNPcHRpb24gfSBmcm9tICcuL2xpYi9tZC1lZGl0b3IudHlwZXMnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIE1hcmtkb3duRWRpdG9yQ29tcG9uZW50XHJcbiAgXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgTWFya2Rvd25FZGl0b3JDb21wb25lbnRcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMTWFya2Rvd25FZGl0b3JNb2R1bGUgeyB9XHJcbiJdLCJuYW1lcyI6WyJ0c2xpYl8xLl9fdmFsdWVzIiwiQ29tcG9uZW50IiwiTkdfVkFMVUVfQUNDRVNTT1IiLCJmb3J3YXJkUmVmIiwiTkdfVkFMSURBVE9SUyIsIkF0dHJpYnV0ZSIsIlJlbmRlcmVyIiwiRG9tU2FuaXRpemVyIiwiVmlld0NoaWxkIiwiSW5wdXQiLCJOZ01vZHVsZSIsIkNvbW1vbk1vZHVsZSIsIkZvcm1zTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxhQTRGZ0IsUUFBUSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUM7WUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsT0FBTztZQUNILElBQUksRUFBRTtnQkFDRixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07b0JBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENB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