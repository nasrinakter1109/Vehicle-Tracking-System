(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('ngx-window-token'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-clipboard', ['exports', '@angular/core', '@angular/platform-browser', 'ngx-window-token', '@angular/common'], factory) :
    (factory((global['ngx-clipboard'] = {}),global.ng.core,global.ng.platformBrowser,null,global.ng.common));
}(this, (function (exports,core,platformBrowser,ngxWindowToken,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ClipboardService = /** @class */ (function () {
        function ClipboardService(document, window) {
            this.document = document;
            this.window = window;
        }
        Object.defineProperty(ClipboardService.prototype, "isSupported", {
            get: /**
             * @return {?}
             */ function () {
                return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} element
         * @return {?}
         */
        ClipboardService.prototype.isTargetValid = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
                    if (element.hasAttribute('disabled')) {
                        throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }
                    return true;
                }
                throw new Error('Target should be input or textarea');
            };
        /**
         * copyFromInputElement
         * @param {?} targetElm
         * @return {?}
         */
        ClipboardService.prototype.copyFromInputElement = /**
         * copyFromInputElement
         * @param {?} targetElm
         * @return {?}
         */
            function (targetElm) {
                try {
                    this.selectTarget(targetElm);
                    /** @type {?} */
                    var re = this.copyText();
                    this.clearSelection(targetElm, this.window);
                    return re && this.isCopySuccessInIE11();
                }
                catch (error) {
                    return false;
                }
            };
        // this is for IE11 return true even if copy fail
        /**
         * @return {?}
         */
        ClipboardService.prototype.isCopySuccessInIE11 = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var clipboardData = this.window['clipboardData'];
                if (clipboardData && clipboardData.getData) {
                    if (!clipboardData.getData('Text')) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         * @param {?} content
         * @param {?=} container
         * @return {?}
         */
        ClipboardService.prototype.copyFromContent = /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         * @param {?} content
         * @param {?=} container
         * @return {?}
         */
            function (content, container) {
                if (container === void 0) {
                    container = this.window.document.body;
                }
                // check if the temp textarea is still belong the current container.
                // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.
                if (this.tempTextArea && !container.contains(this.tempTextArea)) {
                    this.destroy(this.tempTextArea.parentElement);
                }
                if (!this.tempTextArea) {
                    this.tempTextArea = this.createTempTextArea(this.document, this.window);
                    try {
                        container.appendChild(this.tempTextArea);
                    }
                    catch (error) {
                        throw new Error('Container should be a Dom element');
                    }
                }
                this.tempTextArea.value = content;
                return this.copyFromInputElement(this.tempTextArea);
            };
        /**
         * @param {?=} container
         * @return {?}
         */
        ClipboardService.prototype.destroy = /**
         * @param {?=} container
         * @return {?}
         */
            function (container) {
                if (container === void 0) {
                    container = this.window.document.body;
                }
                if (this.tempTextArea) {
                    container.removeChild(this.tempTextArea);
                    // removeChild doesn't remove the reference from memory
                    this.tempTextArea = undefined;
                }
            };
        /**
         * @param {?} inputElement
         * @return {?}
         */
        ClipboardService.prototype.selectTarget = /**
         * @param {?} inputElement
         * @return {?}
         */
            function (inputElement) {
                inputElement.select();
                inputElement.setSelectionRange(0, inputElement.value.length);
                return inputElement.value.length;
            };
        /**
         * @return {?}
         */
        ClipboardService.prototype.copyText = /**
         * @return {?}
         */
            function () {
                return this.document.execCommand('copy');
            };
        /**
         * @param {?} inputElement
         * @param {?} window
         * @return {?}
         */
        ClipboardService.prototype.clearSelection = /**
         * @param {?} inputElement
         * @param {?} window
         * @return {?}
         */
            function (inputElement, window) {
                // tslint:disable-next-line:no-unused-expression
                inputElement && inputElement.blur();
                window.getSelection().removeAllRanges();
            };
        /**
         * @param {?} doc
         * @param {?} window
         * @return {?}
         */
        ClipboardService.prototype.createTempTextArea = /**
         * @param {?} doc
         * @param {?} window
         * @return {?}
         */
            function (doc, window) {
                /** @type {?} */
                var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
                /** @type {?} */
                var ta;
                ta = doc.createElement('textarea');
                // Prevent zooming on iOS
                ta.style.fontSize = '12pt';
                // Reset box model
                ta.style.border = '0';
                ta.style.padding = '0';
                ta.style.margin = '0';
                // Move element out of screen horizontally
                ta.style.position = 'absolute';
                ta.style[isRTL ? 'right' : 'left'] = '-9999px';
                /** @type {?} */
                var yPosition = window.pageYOffset || doc.documentElement.scrollTop;
                ta.style.top = yPosition + 'px';
                ta.setAttribute('readonly', '');
                return ta;
            };
        ClipboardService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ClipboardService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [ngxWindowToken.WINDOW,] }] }
            ];
        };
        return ClipboardService;
    }());
    /**
     * @param {?} doc
     * @param {?} win
     * @param {?} parentDispatcher
     * @return {?}
     */
    function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc, win, parentDispatcher) {
        return parentDispatcher || new ClipboardService(doc, win);
    }
    /** @type {?} */
    var CLIPBOARD_SERVICE_PROVIDER = {
        deps: [/** @type {?} */ (platformBrowser.DOCUMENT), /** @type {?} */ (ngxWindowToken.WINDOW), [new core.Optional(), new core.SkipSelf(), ClipboardService]],
        provide: ClipboardService,
        useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ClipboardDirective = /** @class */ (function () {
        function ClipboardDirective(clipboardSrv) {
            this.clipboardSrv = clipboardSrv;
            this.cbOnSuccess = new core.EventEmitter();
            this.cbOnError = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ClipboardDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        ClipboardDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clipboardSrv.destroy(this.container);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ClipboardDirective.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.clipboardSrv.isSupported) {
                    this.handleResult(false, undefined, event);
                }
                else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {
                    this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);
                }
                else if (this.cbContent) {
                    this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);
                }
            };
        /**
         * Fires an event based on the copy operation result.
         * @param {?} succeeded
         * @param {?} copiedContent
         * @param {?} event
         * @return {?}
         */
        ClipboardDirective.prototype.handleResult = /**
         * Fires an event based on the copy operation result.
         * @param {?} succeeded
         * @param {?} copiedContent
         * @param {?} event
         * @return {?}
         */
            function (succeeded, copiedContent, event) {
                if (succeeded) {
                    this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent, event: event });
                }
                else {
                    this.cbOnError.emit({ isSuccess: false, event: event });
                }
            };
        ClipboardDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[ngxClipboard]'
                    },] },
        ];
        /** @nocollapse */
        ClipboardDirective.ctorParameters = function () {
            return [
                { type: ClipboardService }
            ];
        };
        ClipboardDirective.propDecorators = {
            targetElm: [{ type: core.Input, args: ['ngxClipboard',] }],
            container: [{ type: core.Input }],
            cbContent: [{ type: core.Input }],
            cbOnSuccess: [{ type: core.Output }],
            cbOnError: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event.target'],] }]
        };
        return ClipboardDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ClipboardModule = /** @class */ (function () {
        function ClipboardModule() {
        }
        ClipboardModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, ngxWindowToken.NgxWindowTokenModule],
                        // tslint:disable-next-line:object-literal-sort-keys
                        declarations: [ClipboardDirective],
                        exports: [ClipboardDirective],
                        providers: [CLIPBOARD_SERVICE_PROVIDER]
                    },] },
        ];
        return ClipboardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CLIPBOARD_SERVICE_PROVIDER_FACTORY = CLIPBOARD_SERVICE_PROVIDER_FACTORY;
    exports.ClipboardService = ClipboardService;
    exports.CLIPBOARD_SERVICE_PROVIDER = CLIPBOARD_SERVICE_PROVIDER;
    exports.ClipboardDirective = ClipboardDirective;
    exports.ClipboardModule = ClipboardModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,