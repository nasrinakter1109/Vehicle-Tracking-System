{"version":3,"sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"names":["ClipboardService","document","window","this","prototype","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","selectTarget","re","copyText","clearSelection","isCopySuccessInIE11","error","clipboardData","getData","copyFromContent","content","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","removeChild","undefined","inputElement","select","setSelectionRange","length","execCommand","blur","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","Injectable","Inject","args","DOCUMENT","WINDOW","CLIPBOARD_SERVICE_PROVIDER_FACTORY","win","parentDispatcher","CLIPBOARD_SERVICE_PROVIDER","deps","Optional","SkipSelf","provide","useFactory","ClipboardDirective","clipboardSrv","EventEmitter","ngOnInit","ngOnDestroy","onClick","event","isSupported","handleResult","cbContent","succeeded","copiedContent","cbOnSuccess","emit","isSuccess","cbOnError","Directive","selector","Input","Output","HostListener","ClipboardModule","NgModule","imports","CommonModule","NgxWindowTokenModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Inject, Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { WINDOW } from 'ngx-window-token';\r\n\r\n@Injectable()\r\nexport class ClipboardService {\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    constructor(@Inject(DOCUMENT) public document: any, @Inject(WINDOW) private window: any) {}\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // this is for IE11 return true even if copy fail\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.window.document.body) {\r\n        // check if the temp textarea is still belong the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    public destroy(container: HTMLElement = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Removes current selection and focus from `target` element.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.blur();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n}\r\n// this pattern is mentioned in https://github.com/angular/angular/issues/13854 in #43\r\nexport function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc: Document, win: Window, parentDispatcher: ClipboardService) {\r\n    return parentDispatcher || new ClipboardService(doc, win);\r\n}\r\n\r\nexport const CLIPBOARD_SERVICE_PROVIDER = {\r\n    deps: [DOCUMENT as InjectionToken<Document>, WINDOW as InjectionToken<Window>, [new Optional(), new SkipSelf(), ClipboardService]],\r\n    provide: ClipboardService,\r\n    useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement;\r\n    @Input()\r\n    public container: HTMLInputElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        if (succeeded) {\r\n            this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent, event: event });\r\n        } else {\r\n            this.cbOnError.emit({ isSuccess: false, event: event });\r\n        }\r\n    }\r\n}\r\n","import { ClipboardDirective } from './ngx-clipboard.directive';\nimport { CLIPBOARD_SERVICE_PROVIDER } from './ngx-clipboard.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxWindowTokenModule } from 'ngx-window-token';\nexport * from './ngx-clipboard.directive';\nexport * from './ngx-clipboard.service';\n\n@NgModule({\n  imports: [CommonModule, NgxWindowTokenModule],\n  // tslint:disable-next-line:object-literal-sort-keys\n  declarations: [ClipboardDirective],\n  exports: [ClipboardDirective],\n  providers: [CLIPBOARD_SERVICE_PROVIDER]\n})\nexport class ClipboardModule {}\n"]}