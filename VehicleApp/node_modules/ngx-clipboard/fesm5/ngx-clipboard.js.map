{"version":3,"file":"ngx-clipboard.js.map","sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { WINDOW } from 'ngx-window-token';\r\n\r\n@Injectable()\r\nexport class ClipboardService {\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    constructor(@Inject(DOCUMENT) public document: any, @Inject(WINDOW) private window: any) {}\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * copyFromInputElement\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(targetElm, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // this is for IE11 return true even if copy fail\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.window.document.body) {\r\n        // check if the temp textarea is still belong the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        return this.copyFromInputElement(this.tempTextArea);\r\n    }\r\n\r\n    // remove temporary textarea if any\r\n    public destroy(container: HTMLElement = this.window.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    // select the target html input element\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    // Removes current selection and focus from `target` element.\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement, window: Window) {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        inputElement && inputElement.blur();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n\r\n    // create a fake textarea for copy command\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n}\r\n// this pattern is mentioned in https://github.com/angular/angular/issues/13854 in #43\r\nexport function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc: Document, win: Window, parentDispatcher: ClipboardService) {\r\n    return parentDispatcher || new ClipboardService(doc, win);\r\n}\r\n\r\nexport const CLIPBOARD_SERVICE_PROVIDER = {\r\n    deps: [DOCUMENT as InjectionToken<Document>, WINDOW as InjectionToken<Window>, [new Optional(), new SkipSelf(), ClipboardService]],\r\n    provide: ClipboardService,\r\n    useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY\r\n};\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement;\r\n    @Input()\r\n    public container: HTMLInputElement;\r\n\r\n    @Input()\r\n    public cbContent: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        if (succeeded) {\r\n            this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent, event: event });\r\n        } else {\r\n            this.cbOnError.emit({ isSuccess: false, event: event });\r\n        }\r\n    }\r\n}\r\n","import { ClipboardDirective } from './ngx-clipboard.directive';\nimport { CLIPBOARD_SERVICE_PROVIDER } from './ngx-clipboard.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxWindowTokenModule } from 'ngx-window-token';\nexport * from './ngx-clipboard.directive';\nexport * from './ngx-clipboard.service';\n\n@NgModule({\n  imports: [CommonModule, NgxWindowTokenModule],\n  // tslint:disable-next-line:object-literal-sort-keys\n  declarations: [ClipboardDirective],\n  exports: [ClipboardDirective],\n  providers: [CLIPBOARD_SERVICE_PROVIDER]\n})\nexport class ClipboardModule {}\n"],"names":[],"mappings":"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"}
