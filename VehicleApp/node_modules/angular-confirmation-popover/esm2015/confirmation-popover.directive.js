/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, TemplateRef } from '@angular/core';
import { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';
import { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';
import { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';
import { Positioning } from 'positioning';
/**
 * \@internal
 * @record
 */
export function ConfirmCancelEvent() { }
function ConfirmCancelEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    ConfirmCancelEvent.prototype.clickEvent;
}
/**
 * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):
 * ```html
 * <button
 *  class="btn btn-default"
 *  mwlConfirmationPopover
 *  [popoverTitle]="popoverTitle"
 *  [popoverMessage]="popoverMessage"
 *  placement="left"
 *  (confirm)="confirmClicked = true"
 *  (cancel)="cancelClicked = true"
 *  [(isOpen)]="isOpen">
 *   Show confirm popover!
 * </button>
 * ```
 */
export class ConfirmationPopoverDirective {
    /**
     * \@internal
     * @param {?} viewContainerRef
     * @param {?} elm
     * @param {?} defaultOptions
     * @param {?} cfr
     * @param {?} position
     * @param {?} renderer
     */
    constructor(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.elm = elm;
        this.defaultOptions = defaultOptions;
        this.cfr = cfr;
        this.position = position;
        this.renderer = renderer;
        /**
         * Whether to disable showing the popover. Default `false`.
         */
        this.isDisabled = false;
        /**
         * Will open or show the popover when changed.
         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
         */
        this.isOpen = false;
        /**
         * Will emit when the popover is opened or closed
         */
        this.isOpenChange = new EventEmitter(true);
        /**
         * An expression that is called when the confirm button is clicked.
         */
        this.confirm = new EventEmitter();
        /**
         * An expression that is called when the cancel button is clicked.
         */
        this.cancel = new EventEmitter();
        this.eventListeners = [];
    }
    /**
     * \@internal
     * @return {?}
     */
    ngOnInit() {
        this.isOpenChange.emit(false);
    }
    /**
     * \@internal
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["isOpen"]) {
            if (changes["isOpen"].currentValue === true) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        }
    }
    /**
     * \@internal
     * @return {?}
     */
    ngOnDestroy() {
        this.hidePopover();
    }
    /**
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onConfirm(event) {
        this.confirm.emit(event);
        this.hidePopover();
    }
    /**
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onCancel(event) {
        this.cancel.emit(event);
        this.hidePopover();
    }
    /**
     * \@internal
     * @return {?}
     */
    togglePopover() {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        const /** @type {?} */ closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined' ?
            this.closeOnOutsideClick : this.defaultOptions.closeOnOutsideClick;
        if (this.popover &&
            !this.elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target) &&
            closeOnOutsideClick) {
            this.hidePopover();
        }
    }
    /**
     * @return {?}
     */
    showPopover() {
        if (!this.popover && !this.isDisabled) {
            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65
            // otherwise the document click event gets fired after the click event
            // that triggered the popover to open (no idea why this is so)
            setTimeout(() => {
                this.eventListeners = [
                    this.renderer.listen('document', 'click', (event) => this.onDocumentClick(event)),
                    this.renderer.listen('document', 'touchend', (event) => this.onDocumentClick(event)),
                    this.renderer.listen('window', 'resize', () => this.positionPopover())
                ];
            });
            const /** @type {?} */ options = new ConfirmationPopoverWindowOptions();
            Object.assign(options, this.defaultOptions, {
                onConfirm: (event) => {
                    this.onConfirm(event);
                },
                onCancel: (event) => {
                    this.onCancel(event);
                },
                onAfterViewInit: () => {
                    this.positionPopover();
                }
            });
            const /** @type {?} */ optionalParams = [
                'confirmText',
                'cancelText',
                'placement',
                'confirmButtonType',
                'cancelButtonType',
                'focusButton',
                'hideConfirmButton',
                'hideCancelButton',
                'popoverClass',
                'appendToBody',
                'customTemplate',
                'reverseButtonOrder',
                'popoverTitle',
                'popoverMessage'
            ];
            optionalParams.forEach(param => {
                if (typeof this[param] !== 'undefined') {
                    (/** @type {?} */ (options))[param] = this[param];
                }
            });
            const /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);
            const /** @type {?} */ childInjector = Injector.create([
                {
                    provide: ConfirmationPopoverWindowOptions,
                    useValue: options
                }
            ], this.viewContainerRef.parentInjector);
            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.isOpenChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    positionPopover() {
        if (this.popover) {
            const /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];
            const /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
            this.renderer.setStyle(popoverElement, 'top', `${popoverPosition.top}px`);
            this.renderer.setStyle(popoverElement, 'left', `${popoverPosition.left}px`);
        }
    }
    /**
     * @return {?}
     */
    hidePopover() {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.isOpenChange.emit(false);
            this.eventListeners.forEach(fn => fn());
            this.eventListeners = [];
        }
    }
}
ConfirmationPopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mwlConfirmationPopover]'
            },] },
];
/** @nocollapse */
ConfirmationPopoverDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: ConfirmationPopoverOptions },
    { type: ComponentFactoryResolver },
    { type: Positioning },
    { type: Renderer2 }
];
ConfirmationPopoverDirective.propDecorators = {
    popoverTitle: [{ type: Input }],
    popoverMessage: [{ type: Input }],
    confirmText: [{ type: Input }],
    cancelText: [{ type: Input }],
    placement: [{ type: Input }],
    confirmButtonType: [{ type: Input }],
    cancelButtonType: [{ type: Input }],
    focusButton: [{ type: Input }],
    hideConfirmButton: [{ type: Input }],
    hideCancelButton: [{ type: Input }],
    isDisabled: [{ type: Input }],
    isOpen: [{ type: Input }],
    customTemplate: [{ type: Input }],
    isOpenChange: [{ type: Output }],
    confirm: [{ type: Output }],
    cancel: [{ type: Output }],
    popoverClass: [{ type: Input }],
    appendToBody: [{ type: Input }],
    reverseButtonOrder: [{ type: Input }],
    closeOnOutsideClick: [{ type: Input }],
    togglePopover: [{ type: HostListener, args: ['click',] }]
};
function ConfirmationPopoverDirective_tsickle_Closure_declarations() {
    /**
     * The title of the popover
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.popoverTitle;
    /**
     * The body text of the popover.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.popoverMessage;
    /**
     * The text of the confirm button. Default `Confirm`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.confirmText;
    /**
     * The text of the cancel button. Default `Cancel`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.cancelText;
    /**
     * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.placement;
    /**
     * The bootstrap button type of the confirm button. It can be any supported bootstrap color type
     * e.g. `default`, `warning`, `danger` etc. Default `success`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.confirmButtonType;
    /**
     * The bootstrap button type of the cancel button. It can be any supported bootstrap color type
     * e.g. `default`, `warning`, `danger` etc. Default `default`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.cancelButtonType;
    /**
     * Set to either `confirm` or `cancel` to focus the confirm or cancel button.
     * If omitted, by default it will not focus either button.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.focusButton;
    /**
     * Whether to hide the confirm button. Default `false`.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.hideConfirmButton;
    /**
     * Whether to hide the cancel button. Default `false`.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.hideCancelButton;
    /**
     * Whether to disable showing the popover. Default `false`.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.isDisabled;
    /**
     * Will open or show the popover when changed.
     * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.isOpen;
    /**
     * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:
     * ```html
     * <ng-template #customTemplate let-options="options">
     *   <div [class]="'popover ' + options.placement" style="display: block">
     *     My custom template
     *   </div>
     * </ng-template>
     * ```
     *
     * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]="customTemplate"`
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.customTemplate;
    /**
     * Will emit when the popover is opened or closed
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.isOpenChange;
    /**
     * An expression that is called when the confirm button is clicked.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.confirm;
    /**
     * An expression that is called when the cancel button is clicked.
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.cancel;
    /**
     * A custom CSS class to be added to the popover
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.popoverClass;
    /**
     * Append the element to the document body rather than the trigger element
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.appendToBody;
    /**
     * Swap the order of the confirm and cancel buttons
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.reverseButtonOrder;
    /**
     * Determines whether or not the popover should stay open even when clicking outside of it
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.closeOnOutsideClick;
    /**
     * \@internal
     * @type {?}
     */
    ConfirmationPopoverDirective.prototype.popover;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.eventListeners;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.viewContainerRef;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.elm;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.defaultOptions;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.cfr;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.position;
    /** @type {?} */
    ConfirmationPopoverDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,