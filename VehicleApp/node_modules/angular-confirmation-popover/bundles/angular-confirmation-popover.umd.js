(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('positioning'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-confirmation-popover', ['exports', '@angular/core', 'positioning', '@angular/common'], factory) :
    (factory((global['angular-confirmation-popover'] = {}),global.ng.core,null,global.ng.common));
}(this, (function (exports,core,positioning,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ConfirmationPopoverOptions = (function () {
        function ConfirmationPopoverOptions() {
            this.confirmText = 'Confirm';
            this.cancelText = 'Cancel';
            this.confirmButtonType = 'success';
            this.cancelButtonType = 'default';
            this.placement = 'top';
            this.hideConfirmButton = false;
            this.hideCancelButton = false;
            this.popoverClass = '';
            this.appendToBody = false;
            this.reverseButtonOrder = false;
            this.closeOnOutsideClick = true;
        }
        return ConfirmationPopoverOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * \@internal
     */
    var ConfirmationPopoverWindowOptions = (function (_super) {
        __extends(ConfirmationPopoverWindowOptions, _super);
        function ConfirmationPopoverWindowOptions() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConfirmationPopoverWindowOptions.decorators = [
            { type: core.Injectable },
        ];
        return ConfirmationPopoverWindowOptions;
    }(ConfirmationPopoverOptions));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * \@internal
     */
    var ConfirmationPopoverWindowComponent = (function () {
        function ConfirmationPopoverWindowComponent(options) {
            this.options = options;
        }
        /**
         * @return {?}
         */
        ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.options.onAfterViewInit();
            };
        ConfirmationPopoverWindowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mwl-confirmation-popover-window',
                        styles: [
                            "\n    .popover {\n      display: block;\n    }\n    .bs-popover-top .arrow, .bs-popover-bottom .arrow {\n      left: 50%;\n    }\n    .bs-popover-left .arrow, .bs-popover-right .arrow {\n      top: 50%;\n    }\n    .btn {\n      transition: none;\n    }\n    .confirm-btns {\n      display: flex;\n      justify-content: space-around;\n    }\n    .confirm-btn-container {\n      flex-basis: 50%;\n    }\n    .confirm-btn-container:not(:first-child) {\n      margin-left: 4px;\n    }\n    .confirm-btn-container:not(:last-child) {\n      margin-right: 4px;\n    }\n    .confirm-btns-reversed {\n      flex-direction: row-reverse;\n    }\n    .confirm-btns-reversed .confirm-btn-container:not(:first-child) {\n      margin-right: 4px;\n      margin-left: 0;\n    }\n    .confirm-btns-reversed .confirm-btn-container:not(:last-child) {\n      margin-right: 0;\n      margin-left: 4px;\n    }\n  "
                        ],
                        template: "\n    <ng-template #defaultTemplate let-options=\"options\">\n      <div [ngClass]=\"[\n        'popover',\n        options.placement,\n        'popover-' + options.placement,\n        'bs-popover-' + options.placement,\n        options.popoverClass\n      ]\">\n        <div class=\"popover-arrow arrow\"></div>\n        <h3 class=\"popover-title popover-header\" [innerHTML]=\"options.popoverTitle\"></h3>\n        <div class=\"popover-content popover-body\">\n          <p [innerHTML]=\"options.popoverMessage\"></p>\n          <div class=\"confirm-btns\" [class.confirm-btns-reversed]=\"options.reverseButtonOrder\">\n            <div\n              class=\"confirm-btn-container\"\n              *ngIf=\"!options.hideCancelButton\">\n              <button\n                type=\"button\"\n                [mwlFocus]=\"options.focusButton === 'cancel'\"\n                [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n                (click)=\"options.onCancel({clickEvent: $event})\"\n                [innerHtml]=\"options.cancelText\">\n              </button>\n            </div>\n            <div\n              class=\"confirm-btn-container\"\n              *ngIf=\"!options.hideConfirmButton\">\n              <button\n                type=\"button\"\n                [mwlFocus]=\"options.focusButton === 'confirm'\"\n                [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n                (click)=\"options.onConfirm({clickEvent: $event})\"\n                [innerHtml]=\"options.confirmText\">\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{options: options}\">\n    </ng-template>\n  "
                    },] },
        ];
        /** @nocollapse */
        ConfirmationPopoverWindowComponent.ctorParameters = function () {
            return [
                { type: ConfirmationPopoverWindowOptions }
            ];
        };
        return ConfirmationPopoverWindowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):
     * ```html
     * <button
     *  class="btn btn-default"
     *  mwlConfirmationPopover
     *  [popoverTitle]="popoverTitle"
     *  [popoverMessage]="popoverMessage"
     *  placement="left"
     *  (confirm)="confirmClicked = true"
     *  (cancel)="cancelClicked = true"
     *  [(isOpen)]="isOpen">
     *   Show confirm popover!
     * </button>
     * ```
     */
    var ConfirmationPopoverDirective = (function () {
        /**
         * @internal
         */
        function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {
            this.viewContainerRef = viewContainerRef;
            this.elm = elm;
            this.defaultOptions = defaultOptions;
            this.cfr = cfr;
            this.position = position;
            this.renderer = renderer;
            /**
             * Whether to disable showing the popover. Default `false`.
             */
            this.isDisabled = false;
            /**
             * Will open or show the popover when changed.
             * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
             */
            this.isOpen = false;
            /**
             * Will emit when the popover is opened or closed
             */
            this.isOpenChange = new core.EventEmitter(true);
            /**
             * An expression that is called when the confirm button is clicked.
             */
            this.confirm = new core.EventEmitter();
            /**
             * An expression that is called when the cancel button is clicked.
             */
            this.cancel = new core.EventEmitter();
            this.eventListeners = [];
        }
        /**
         * @internal
         */
        /**
         * \@internal
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.ngOnInit = /**
         * \@internal
         * @return {?}
         */
            function () {
                this.isOpenChange.emit(false);
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @param {?} changes
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.ngOnChanges = /**
         * \@internal
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["isOpen"]) {
                    if (changes["isOpen"].currentValue === true) {
                        this.showPopover();
                    }
                    else {
                        this.hidePopover();
                    }
                }
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.ngOnDestroy = /**
         * \@internal
         * @return {?}
         */
            function () {
                this.hidePopover();
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @param {?} event
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.onConfirm = /**
         * \@internal
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.confirm.emit(event);
                this.hidePopover();
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @param {?} event
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.onCancel = /**
         * \@internal
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.cancel.emit(event);
                this.hidePopover();
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.togglePopover = /**
         * \@internal
         * @return {?}
         */
            function () {
                if (!this.popover) {
                    this.showPopover();
                }
                else {
                    this.hidePopover();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.onDocumentClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined' ?
                    this.closeOnOutsideClick : this.defaultOptions.closeOnOutsideClick;
                if (this.popover &&
                    !this.elm.nativeElement.contains(event.target) &&
                    !this.popover.location.nativeElement.contains(event.target) &&
                    closeOnOutsideClick) {
                    this.hidePopover();
                }
            };
        /**
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.showPopover = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.popover && !this.isDisabled) {
                    // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65
                    // otherwise the document click event gets fired after the click event
                    // that triggered the popover to open (no idea why this is so)
                    setTimeout(function () {
                        _this.eventListeners = [
                            _this.renderer.listen('document', 'click', function (event) {
                                return _this.onDocumentClick(event);
                            }),
                            _this.renderer.listen('document', 'touchend', function (event) {
                                return _this.onDocumentClick(event);
                            }),
                            _this.renderer.listen('window', 'resize', function () { return _this.positionPopover(); })
                        ];
                    });
                    var /** @type {?} */ options_1 = new ConfirmationPopoverWindowOptions();
                    Object.assign(options_1, this.defaultOptions, {
                        onConfirm: function (event) {
                            _this.onConfirm(event);
                        },
                        onCancel: function (event) {
                            _this.onCancel(event);
                        },
                        onAfterViewInit: function () {
                            _this.positionPopover();
                        }
                    });
                    var /** @type {?} */ optionalParams = [
                        'confirmText',
                        'cancelText',
                        'placement',
                        'confirmButtonType',
                        'cancelButtonType',
                        'focusButton',
                        'hideConfirmButton',
                        'hideCancelButton',
                        'popoverClass',
                        'appendToBody',
                        'customTemplate',
                        'reverseButtonOrder',
                        'popoverTitle',
                        'popoverMessage'
                    ];
                    optionalParams.forEach(function (param) {
                        if (typeof _this[param] !== 'undefined') {
                            ((options_1))[param] = _this[param];
                        }
                    });
                    var /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);
                    var /** @type {?} */ childInjector = core.Injector.create([
                        {
                            provide: ConfirmationPopoverWindowOptions,
                            useValue: options_1
                        }
                    ], this.viewContainerRef.parentInjector);
                    this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
                    if (options_1.appendToBody) {
                        document.body.appendChild(this.popover.location.nativeElement);
                    }
                    this.isOpenChange.emit(true);
                }
            };
        /**
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.positionPopover = /**
         * @return {?}
         */
            function () {
                if (this.popover) {
                    var /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];
                    var /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
                    this.renderer.setStyle(popoverElement, 'top', popoverPosition.top + "px");
                    this.renderer.setStyle(popoverElement, 'left', popoverPosition.left + "px");
                }
            };
        /**
         * @return {?}
         */
        ConfirmationPopoverDirective.prototype.hidePopover = /**
         * @return {?}
         */
            function () {
                if (this.popover) {
                    this.popover.destroy();
                    delete this.popover;
                    this.isOpenChange.emit(false);
                    this.eventListeners.forEach(function (fn) { return fn(); });
                    this.eventListeners = [];
                }
            };
        ConfirmationPopoverDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mwlConfirmationPopover]'
                    },] },
        ];
        /** @nocollapse */
        ConfirmationPopoverDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.ElementRef },
                { type: ConfirmationPopoverOptions },
                { type: core.ComponentFactoryResolver },
                { type: positioning.Positioning },
                { type: core.Renderer2 }
            ];
        };
        ConfirmationPopoverDirective.propDecorators = {
            popoverTitle: [{ type: core.Input }],
            popoverMessage: [{ type: core.Input }],
            confirmText: [{ type: core.Input }],
            cancelText: [{ type: core.Input }],
            placement: [{ type: core.Input }],
            confirmButtonType: [{ type: core.Input }],
            cancelButtonType: [{ type: core.Input }],
            focusButton: [{ type: core.Input }],
            hideConfirmButton: [{ type: core.Input }],
            hideCancelButton: [{ type: core.Input }],
            isDisabled: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            customTemplate: [{ type: core.Input }],
            isOpenChange: [{ type: core.Output }],
            confirm: [{ type: core.Output }],
            cancel: [{ type: core.Output }],
            popoverClass: [{ type: core.Input }],
            appendToBody: [{ type: core.Input }],
            reverseButtonOrder: [{ type: core.Input }],
            closeOnOutsideClick: [{ type: core.Input }],
            togglePopover: [{ type: core.HostListener, args: ['click',] }]
        };
        return ConfirmationPopoverDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * A helper directive to focus buttons. You will only need this if using a custom template
     */
    var FocusDirective = (function () {
        function FocusDirective(elm) {
            this.elm = elm;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        FocusDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["mwlFocus"] && this.mwlFocus === true) {
                    this.elm.nativeElement.focus();
                }
            };
        FocusDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mwlFocus]'
                    },] },
        ];
        /** @nocollapse */
        FocusDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        FocusDirective.propDecorators = {
            mwlFocus: [{ type: core.Input }]
        };
        return FocusDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ USER_OPTIONS = new core.InjectionToken('confirmation popover user options');
    /**
     * @param {?} userOptions
     * @return {?}
     */
    function optionsFactory(userOptions) {
        var /** @type {?} */ options = new ConfirmationPopoverOptions();
        Object.assign(options, userOptions);
        return options;
    }
    var ConfirmationPopoverModule = (function () {
        function ConfirmationPopoverModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        ConfirmationPopoverModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = {};
                }
                return {
                    ngModule: ConfirmationPopoverModule,
                    providers: [
                        {
                            provide: USER_OPTIONS,
                            useValue: options
                        },
                        {
                            provide: ConfirmationPopoverOptions,
                            useFactory: optionsFactory,
                            deps: [USER_OPTIONS]
                        },
                        positioning.Positioning
                    ]
                };
            };
        ConfirmationPopoverModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ConfirmationPopoverDirective,
                            ConfirmationPopoverWindowComponent,
                            FocusDirective
                        ],
                        imports: [common.CommonModule],
                        exports: [ConfirmationPopoverDirective, FocusDirective],
                        entryComponents: [ConfirmationPopoverWindowComponent]
                    },] },
        ];
        return ConfirmationPopoverModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ConfirmationPopoverModule = ConfirmationPopoverModule;
    exports.ɵd = ConfirmationPopoverOptions;
    exports.ɵf = ConfirmationPopoverWindowOptions;
    exports.ɵe = ConfirmationPopoverWindowComponent;
    exports.ɵc = ConfirmationPopoverDirective;
    exports.ɵa = USER_OPTIONS;
    exports.ɵb = optionsFactory;
    exports.ɵg = FocusDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,